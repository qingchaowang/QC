}
if(jpad[2] > 90e6) {
excess <- jpad[2] - 90e6
jpad[2] <- 90e6
ffw <- find_first_winner(winners, 3, 13)
jpad[ffw] <-  jpad[ffw] + excess
}
prize <- round_down(10)(ifelse(winners > 0, jpad/winners, 0))
prize <- pool_seniority(jpad, winners, prize, 1, 12, round_down(10))
rounding <- sum(ifelse(winners, jpad - winners*prize, 0))
booster <- booster + rounding
to_roll_over <- ifelse(winners, 0, jpad)
list(date = date, entries = entries, winners = winners, jpad = jpad, fund = fund, booster = booster, to_roll_over = to_roll_over, prize = prize)
}
crawler <- function() {
url_string <- "https://www.lotto-hessen.de/static/gamebroker_5/default/download_files/eurojackpot2018.zip"
system(command = paste("curl ", url_string, " -o ejp_data.zip"))
system(command = "tar xzvf ejp_data.zip")
system(command = "rm ejp_data.zip")
x <- read.table("eurojackpot.txt", skip = 1)
x_dates <- paste(x[,4], x[,3], x[,2], sep = "/")
x_dates <- as.Date(x_dates, "%Y/%m/%d")
y <- x[,seq(12,36,2)]
y <- do.call(data.frame, lapply(y, function(x){
as.numeric(sub("Jackpot", 0, x))})
)
y <- data.frame(x_dates, y)
prizes <- x[, seq(13,35,2)]
prizes <- do.call(data.frame, lapply(prizes, function(x){
as.numeric(gsub(",", ".", x))
}))
y <- cbind(y, prizes)
colnames(y) <- c("date", "stakes", paste("winners", 1:12, sep = "_"), paste("prize", 1:12, sep = "_"))
system(command = "rm eurojackpot.txt")
process <- function(after_date, listener) {
out <- list()
n <- nrow(y)
i <- which(y$date > after_date)[1]
j <- 1
while(i <= n) {
out[[j]] <- listener(y[i,])
i <- i + 1
j <- j + 1
}
out
}
list(process = process)
}
historical_data <- function() {
my_data <- read.csv("~/GitHub/R/data_extractors/eurojackpot/extracted_data.csv", header = T)
latest_draw <- deserialise_draw(my_data[nrow(my_data),])
call <- function(new_data) {
date <- format(new_data$date, "%Y-%b-%d")
entries <- new_data$stakes/2
winners <- c(sapply(paste("winners_", 1:12, sep = ""), getElement, object = new_data), use.names = F)
latest_draw <<- next_draw(latest_draw, date, entries, winners)
serialise_draw(latest_draw)
}
append <- function(serialized_data) {
s_data <- do.call(rbind, serialized_data)
my_data <- rbind(my_data, s_data)
write.csv(my_data, file = "extracted_data.csv", row.names = F, quote = F)
}
list(call = call, append = append, most_recent_date = latest_draw$date)
}
data_crawler <- crawler()
hist_data <- historical_data()
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
z[[1]]
hist_data$append(z)
data_crawler <- crawler()
source("crawler.R")
data_crawler <- crawler()
hist_data <- historical_data()
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data()
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
z
hist_data$append(z)
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
hist_data$append(z)
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
hist_data <- historical_data("extracted_data.csv")
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
debug(historical_data)
hist_data <- historical_data("extracted_data.csv")
my_data
my_data$date
debug(deserialise_draw)
name
name
indices
name <- draw_names[1]
name
draw_names
grep("date\\d*", draw_names)
deserialise_draw <- function(draw) {
draw_names <- names(draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
name <- paste(name, "\\d*", sep = "")
indices <- grep(name, draw_names)
if(length(indices) == 1) out[[name]] <- draw[[name]]
else out[[name]] <- c(sapply(draw_names[indices], getElement, object = draw), use.names = F)
draw_names <- draw_names[-indices]
}
out$date <- as.Date(out$date, "%Y-%b-%d")
out
}
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
hist_data$append(z)
debug(historical_data)
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
debug(deserialise_draw)
indices
out
deserialise_draw <- function(draw) {
draw_names <- names(draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
pattern <- paste(name, "\\d*", sep = "")
indices <- grep(pattern, draw_names)
if(length(indices) == 1) out[[name]] <- draw[[name]]
else out[[name]] <- c(sapply(draw_names[indices], getElement, object = draw), use.names = F)
draw_names <- draw_names[-indices]
}
out$date <- as.Date(out$date, "%Y-%b-%d")
out
}
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
latest_draw
hist_data <- historical_data("extracted_data.csv")
debug(deserialise_draw)
draw
indices
out
name
out
name
deserialise_draw <- function(draw) {
draw_names <- names(draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
pattern <- sub(".*_\\d+", "", name)
indices <- grep(pattern, draw_names)
if(length(indices) == 1) out[[name]] <- draw[[name]]
else out[[name]] <- c(sapply(draw_names[indices], getElement, object = draw), use.names = F)
draw_names <- draw_names[-indices]
}
out$date <- as.Date(out$date, "%Y-%b-%d")
out
}
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
debug(deserialise_draw)
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
out
out
name
pattern
deserialise_draw <- function(draw) {
draw_names <- names(draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
pattern <- sub("(.*)_\\d+", "\\1", name)
indices <- grep(pattern, draw_names)
if(length(indices) == 1) out[[name]] <- draw[[name]]
else out[[name]] <- c(sapply(draw_names[indices], getElement, object = draw), use.names = F)
draw_names <- draw_names[-indices]
}
out$date <- as.Date(out$date, "%Y-%b-%d")
out
}
hist_data <- historical_data("extracted_data.csv")
debug(deserialise_draw)
hist_data <- historical_data("extracted_data.csv")
out
pattern
out
deserialise_draw <- function(draw) {
draw_names <- names(draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
pattern <- sub("(.*)_\\d+", "\\1", name)
indices <- grep(pattern, draw_names)
if(length(indices) == 1) out[[name]] <- draw[[name]]
else out[[name]] <- c(sapply(draw_names[indices], getElement, object = draw), use.names = F)
draw_names <- draw_names[-indices]
}
out$date <- as.Date(out$date, "%Y-%b-%d")
out
}
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
debug(historical_data)
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
debug(historical_data)
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
latest_draw
deserialise_draw <- function(draw) {
draw_names <- names(draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
name <- sub("(.*)_\\d+", "\\1", name)
indices <- grep(name, draw_names)
if(length(indices) == 1) out[[name]] <- draw[[name]]
else out[[name]] <- c(sapply(draw_names[indices], getElement, object = draw), use.names = F)
draw_names <- draw_names[-indices]
}
out$date <- as.Date(out$date, "%Y-%b-%d")
out
}
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
debug(historical_data)
hist_data <- historical_data("extracted_data.csv")
latest_draw
historical_data <- function(file_name) {
my_data <- read.csv(file_name, header = T)
latest_draw <- deserialise_draw(my_data[nrow(my_data),])
call <- function(new_data) {
names_data <- names(new_data)
date <- format(new_data$date, "%Y-%b-%d")
entries <- new_data$entries
winners <- c(sapply(names_data[grep("winners_", names_data)], getElement, object = new_data), use.names = F)
latest_draw <<- next_draw(latest_draw, date, entries, winners)
serialise_draw(latest_draw)
}
append <- function(serialized_data) {
s_data <- do.call(rbind, serialized_data)
my_data <- rbind(my_data, s_data)
write.csv(my_data, file = file_name, row.names = F, quote = F)
}
list(call = call, append = append, most_recent_date = latest_draw$date)
}
debug(serialise_draw)
hist_data <- historical_data("extracted_data.csv")
debug(deserialise_draw)
hist_data <- historical_data("extracted_data.csv")
out
name
name
grep(name, draw_names)
grep(paste(name, "_\\d+"), draw_names)
grep(paste(name, "_\\d+", sep = ""), draw_names)
deserialise_draw <- function(draw) {
draw_names <- names(draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
name <- sub("(.*)_\\d+", "\\1", name)
indices <- grep(paste(name, "_\\d+", sep = ""), draw_names)
if(length(indices) == 1) out[[name]] <- draw[[name]]
else out[[name]] <- c(sapply(draw_names[indices], getElement, object = draw), use.names = F)
draw_names <- draw_names[-indices]
}
out$date <- as.Date(out$date, "%Y-%b-%d")
out
}
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
hist_data$append(z)
debug(deserialise_draw)
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
out
hist_data <- historical_data("extracted_data.csv")
name
name
indices
grep(paste(name, "_\\d*", sep = ""), draw_names)
grep(paste(name, ".*\\d*", sep = ""), draw_names)
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
hist_data$append(z)
debug(deserialise_draw)
hist_data <- historical_data("extracted_data.csv")
indices
out
out
name
name
indices
out
name
name
indices
deserialise_draw <- function(draw) {
draw_names <- names(draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
name <- sub("(.*)_\\d+", "\\1", name)
indices <- grep(paste(name, "_\\d+", sep = ""), draw_names)
if(length(indices) == 0) out[[name]] <- draw[[name]]
else out[[name]] <- c(sapply(draw_names[indices], getElement, object = draw), use.names = F)
draw_names <- draw_names[-indices]
}
out$date <- as.Date(out$date, "%Y-%b-%d")
out
}
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
hist_data$append(z)
debug(deserialise_draw)
hist_data <- historical_data("extracted_data.csv")
ot
out
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
round_down <- function(cents) {
function(x) {
floor(x*cents)/cents
}
}
find_first_winner <- function(winners, from, to) {
offset <- from - 1
k <- min(which(winners[from:to] > 0)) + offset
k
}
must_go <- function(jpad, winners, from, to) {
k <- find_first_winner(winners, from, to)
if(k > from) {
jpad[k] <- sum(jpad[from:k])
jpad[from:(k-1)] <- 0
}
jpad
}
pool_seniority <- function(jpad, winners, prize, from, to, round_f) {
tags <- from:to
for(i in 1:(length(tags)-1)) {
fund_i <- jpad[tags[i]]
winners_i <- winners[tags[i]]
if(winners_i) {
for(j in (i+1):length(tags)) {
fund_j <- jpad[tags[j]]
prize_j <- prize[tags[j]]
winners_j <- winners[tags[j]]
if(winners_j) {
fund_i <- fund_i + fund_j
winners_i <- winners_i + winners_j
if(prize[tags[i]] < prize_j) {
for(k in i:j) {
if(winners[tags[k]]) prize[tags[k]] <- round_f(fund_i/winners_i)
}
}
}
}
}
}
prize
}
# creates a named list of draw attributes from a file
# all names in the file which are suffixed by an "name_digits" will become part of the "name" attribute
# for instance, "winners_1", "winners_2", will create an vector in the list "winners" with two elements
deserialise_draw <- function(draw) {
draw_names <- names(draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
name <- sub("(.*)_\\d+", "\\1", name)
indices <- grep(paste(name, "_\\d+", sep = ""), draw_names)
if(length(indices) == 0) {
out[[name]] <- draw[[name]]
draw_names <- draw_names[-which(draw_names == name)]
}
else {
out[[name]] <- c(sapply(draw_names[indices], getElement, object = draw), use.names = F)
draw_names <- draw_names[-indices]
}
}
out$date <- as.Date(out$date, "%Y-%b-%d")
out
}
serialise_draw <- function(draw) {
flat_draw <- data.frame(remove = NA)
for(el in draw) {
if(length(el) == 1) flat_draw <- cbind(flat_draw, el)
else flat_draw <- cbind(flat_draw, t(el))
}
flat_draw <- flat_draw[-1]
names(flat_draw) <- do.call(c, mapply(function(x,y){
if(y == 1) x
else paste(x, 1:y, sep = "_")
}, as.list(names(draw)), lapply(draw, length)))
flat_draw
}
historical_data <- function(file_name) {
my_data <- read.csv(file_name, header = T)
latest_draw <- deserialise_draw(my_data[nrow(my_data),])
call <- function(new_data) {
names_data <- names(new_data)
date <- format(new_data$date, "%Y-%b-%d")
entries <- new_data$entries
winners <- c(sapply(names_data[grep("winners_", names_data)], getElement, object = new_data), use.names = F)
latest_draw <<- next_draw(latest_draw, date, entries, winners)
serialise_draw(latest_draw)
}
append <- function(serialized_data) {
s_data <- do.call(rbind, serialized_data)
my_data <- rbind(my_data, s_data)
write.csv(my_data, file = file_name, row.names = F, quote = F)
}
list(call = call, append = append, most_recent_date = latest_draw$date)
}
source("crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
hist_data$append(z)
source("~/GitHub/R/data_extractors/eurojackpot/crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
hist_data$append(z)
source("~/GitHub/R/data_extractors/eurojackpot/crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
hist_data$append(z)
export_monitoring_sheet_unit <- function(input_file_name, output_file_name, game_name, sheet_index, start_date, end_date) {
require(readxl)
file <- read_excel(input_file_name, sheet_index, skip = 3, col_names = T)[,c("date", "off risk", "function", "shared winners",
"primary winners", "ML24 jackpot (USD)", "secondary winners", "bets", "odds")]
file[,1] <- as.Date(file[,1]$date)
inc_rows <- (file[,1] >= start_date)
if(!is.null(end_date)) inc_rows <- inc_rows & (file[,1] < end_date)
file <- file[inc_rows,]
file[,1] <- format(file[[1]], "%Y-%b-%d")
file <- cbind(game_name, file)
write.table(file, file = output_file_name, append = T, row.names = F, quote = F, col.names = F)
}
export_monitoring_sheet <- function(input_file_name, output_file_name, game_names, start_date, end_date = NULL) {
if(file.exists(output_file_name)) file.remove(output_file_name)
for(i in 1:length(game_names)) export_monitoring_sheet_unit(input_file_name, output_file_name, game_names[i], i, start_date, end_date)
}
game_names <- c("glp", "emp", "ejp", "irlp", "pbp", "mmp")
export_monitoring_sheet("/Volumes/dfs/Hedging Management/002_Operational/020_Tyche_Monitoring/005_Monitoring/001_Weekly_Monitoring/Monitoring_Sheet_ML24_02112018.xlsx", "~/Desktop/monitoring_sheet/accounts_oct.txt", game_names, "2018-1-1")
source("~/GitHub/R/data_extractors/eurojackpot/crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
hist_data$append(z)
source("~/GitHub/R/data_extractors/eurojackpot/crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
hist_data$append(z)
source("~/GitHub/R/data_extractors/eurojackpot/crawler.R")
source("~/GitHub/R/eurojackpot/eurojackpot.R")
data_crawler <- crawler()
hist_data <- historical_data("extracted_data.csv")
z <- data_crawler$process(hist_data$most_recent_date, hist_data$call)
hist_data$append(z)
