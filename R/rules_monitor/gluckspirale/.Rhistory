colnames(x) <- c("Game", "Ground up EL", "% of Total")
x
}
read_metrics <- function(file_name) {
files <- system2("ls", stdout = TRUE)
files <- files[grep(file_name, files)]
x <- lapply(files, read.table)
y <- x[[1]]
y[,-c(1:3)] <- 0
for(i in 1:length(x)) y[,-c(1:3)] <- y[,-c(1:3)] + x[[i]][,-c(1:3)]
y[,-c(1:3)] <- y[,-c(1:3)]/length(x)
y[,1] <- as.Date(y[,1], "%Y-%b-%d")
n_layers <- (ncol(y) - 2)/3
out <- list()
for(i in 1:n_layers) {
result <- cbind(y[,1:2], y[,(3*i):(3*i+2)])
colnames(result) <- c("Date", "Game", "AP", "EL", "EP")
result$"dEL" <- c(result$EL[1], diff(result$EL))
out[[i]] <- result[nrow(result):1, ]
}
out
}
shinyApp(ui, server)
read_modelled_el <- function(filename = "/Volumes/dfs/Hedging Management/001_Strategic/001_Tyche/006_Analysis/Hoplon III Insurance Ltd - Data File - November 2017.xlsx") {
require(readxl)
modelled_risk_metrics <- read_excel(filename, sheet = "KeyMetricsPerDay", skip = 11)
modelled_risk_metrics[c("day", "el_ClassC", "el_ClassB", "el_ClassA")]
}
modelled_el_on_date <- function(x, date) {
ret <- subset(x, as.Date(x$day) == as.Date(date))
unlist(ret)[-1]
}
rol_actual <- function(conditional_el, el_i, rol_i, el_factor) {
out <- rol_i + el_factor * (conditional_el - el_i)
names(out) <- c("ROL_ClassC", "ROL_ClassB", "ROL_ClassA")
out
}
adjustment_prem <- function(conditional_el, el_i, el_it, min_rol_multiple, rol_i, el_factor) {
el_min <- el_i - rol_i * (1 - min_rol_multiple) / el_factor
el_mint <- el_it * el_min / el_i
out <- pmax(0, el_factor * (conditional_el - el_mint)) * 30e6
names(out) <- c("AP_ClassC", "AP_ClassB", "AP_ClassA")
out
}
min_el_t <- function(modelled_el, min_rol_multiple, rol_i, el_factor, date, last_date) {
el_i <- modelled_el_on_date(modelled_el, last_date)
el_it <- modelled_el_on_date(modelled_el, date)
el_min <- el_i - rol_i * (1 - min_rol_multiple) / el_factor
el_it * el_min / el_i
}
x <- read_modelled_el()
min_el_t(x, 0.75, c(0.156, 0.0891, 0.0474), 1.35, "2018-08-30", "2018-12-31")
min_el_t(x, 0.75, c(0.156, 0.0891, 0.0474), 1.35, "2018-07-30", "2018-12-31")
min_el_t(x, 0.75, c(0.156, 0.0891, 0.0474), 1.35, "2018-06-30", "2018-12-31")
min_el_t(x, 0.75, c(0.156, 0.0891, 0.0474), 1.35, "2018-06-29", "2018-12-31")
min_el_t(x, 0.75, c(0.156, 0.0891, 0.0474), 1.35, "2018-06-28", "2018-12-31")
min_el_t(x, 0.75, c(0.156, 0.0891, 0.0474), 1.35, "2018-01-31", "2018-12-31")
min_el_t(x, 0.75, c(0.156, 0.0891, 0.0474), 1.35, "2018-01-30", "2018-12-31")
min_el_t(x, 0.75, c(0.156, 0.0891, 0.0474), 1.35, "2018-01-29", "2018-12-31")
min_el_t(x, 0.75, c(0.156, 0.0891, 0.0474), 1.35, "2018-01-28", "2018-12-31")
min_el_t(x, 0.75, c(0.2425, 0.1475, 0.09), 1.35, "2018-07-30", "2018-12-31")
min_el_t(x, 0.75, c(0.2425, 0.1475, 0.09), 1.35, "2018-07-29", "2018-12-31")
min_el_t(x, 0.75, c(0.2425, 0.1475, 0.09), 1.35, "2018-07-28", "2018-12-31")
min_el_t(x, 0.75, c(0.2425, 0.1475, 0.09), 1.35, "2018-07-27", "2018-12-31")
min_el_t(x, 0.75, c(0.2425, 0.1475, 0.09), 1.35, "2018-07-26", "2018-12-31")
min_el_t(x, 0.75, c(0.2425, 0.1475, 0.09), 1.35, "2018-08-30", "2018-12-31")
# this function calculates the following double summation
# sum_x sum_y ( layer_f(payout_fn(x,y)) * p_prob(tickets,x) * s_prob(bets, x) )
# layer_f is a function that takes one argument (the loss) and returns the loss in the layer
# payout_fn is a function that takes two arguments (primary winners and secondary winners) and returns the ground-up loss
# p_prob/s_prob is a function of two arguments (number of entries, number of winners) and returns the corresponding pdf
# tickets is the PURE primary tickets (ie excluding any bets bought via a primary channel)
expected_loss <- function(N, layer_f, payout_fn, p_prob, s_prob, tickets, bets) {
nx <- 0:N
ny <- 1:N
probs <- outer(nx, ny, function(x, y){
p_prob(tickets, x) * s_prob(bets, y)
})
losses <- outer(nx, ny, function(x, y){
layer_f(payout_fn(x, y))
})
sum(probs * losses)
}
# generic total ground-up payout function given jackpot and divisor function
make_payout_f <- function(jackpot, divisor_f) {
function(x, y) {
y*jackpot/divisor_f(x,y)
}
}
# max payout function
max_payout_f <- function(jackpot) {
make_payout_f(jackpot, pmax)
}
# sum payout function
sum_payout_f <- function(jackpot) {
make_payout_f(jackpot, function(x,y){x+y})
}
# poisson density function
poisson_f <- function(odds) {
function(n, x) {
dpois(x, n/odds)
}
}
# returns a function that calculates losses in a layer with given capacity and retention/attachement point
make_layer_f <- function(capacity, retention) {
function(x) {
pmin(capacity, pmax(x - retention, 0))
}
}
# function for calculating the expected loss in a layer for a GLS 13th must go
gls_must_go <- function(N, ins_layer, jackpot1, jackpot2, tickets, bets) {
el <- expected_loss(N, ins_layer, max_payout_f(jackpot1 + jackpot2), poisson_f(15537573/0.9), poisson_f(15537573), tickets, bets)
el*dpois(0, (tickets + bets)/139838160)
}
gls_must_go_sum <- function(N, ins_layer, jackpot1, jackpot2, tickets, bets) {
el <- expected_loss(N, ins_layer, sum_payout_f(jackpot1 + jackpot2), poisson_f(15537573/0.9), poisson_f(15537573), tickets, bets)
el*dpois(0, (tickets + bets)/139838160)
}
# function for calculating the expected loss in a layer for a EJS spillover
ejs_spill <- function(N, ins_layer, jackpot1, jackpot2, tickets, bets) {
el <- expected_loss(N, ins_layer, max_payout_f(jackpot2), poisson_f(5959012), poisson_f(5959012), tickets, bets)
el
}
# function for calculating the expected loss in a layer for a EJS spillover
ejs_spill_sum <- function(N, ins_layer, jackpot1, jackpot2, tickets, bets) {
el <- expected_loss(N, ins_layer, sum_payout_f(jackpot2), poisson_f(5959012), poisson_f(5959012), tickets, bets)
el
}
# function for calculating the expected loss in a layer for a EMS spillover
ems_spill <- function(N, ins_layer, jackpot1, jackpot2, tickets, bets) {
el <- expected_loss(N, ins_layer, sum_payout_f(jackpot2), poisson_f(6991908), poisson_f(6991908), tickets, bets)
el
}
# function for calculating the expected loss in a layer for a EMS 5th must go
ems_must_go <- function(N, ins_layer, jackpot1, jackpot2, tickets, bets) {
el_so <- expected_loss(N, ins_layer, sum_payout_f(jackpot2), poisson_f(6991908), poisson_f(6991908), tickets, bets)
el_pd <- expected_loss(N, ins_layer, sum_payout_f(jackpot1 + jackpot2), poisson_f(6991908/0.9), poisson_f(6991908), tickets, bets)
prob_pd <- dpois(0, (tickets + bets)/139838160)
prob_pd*el_pd + (1-prob_pd)*el_so
}
# function for calculating the total expected cost in our special insurance tower
# fn is one of the gls_must_go, ems_spill,... functions
special_cost <- function(multiple, ipt, N, jackpot1, jackpot2, tickets, bets, fn) {
fn <- match.fun(fn)
ret_layer <- make_layer_f(5e6, 0)
ins_layer <- make_layer_f(20e6, 5e6)
xs_layer <- make_layer_f(400e6, 25e6)
ret_cost <- fn(N, ret_layer, jackpot1, jackpot2, tickets, bets)
xs_cost <- fn(N, xs_layer, jackpot1, jackpot2, tickets, bets)
ins_cost <- fn(N, ins_layer, jackpot1, jackpot2, tickets, bets)*(1+ipt)*multiple
total_cost <- ret_cost + ins_cost + xs_cost
c(retention = ret_cost, insurance = ins_cost, xs_retention = xs_cost, total = total_cost)
}
special_cost(multiple = 1.7, ipt = 0.12, N = 50, jackpot1 = 27878873.70, jackpot2 = 1174251.69 , tickets = 31875681, bets = 1131755, fn = gls_must_go)
?scale
library(rvest)
my_session < html_session("https://www.nationallottery.co.za/lotto-history")
my_session <- html_session("https://www.nationallottery.co.za/lotto-history")
my_session
my_session <- html_session("https://www.nationallottery.co.za/lotto-history")
my_session
test <- follow_link(my_session, "LOTTO DRAW 1838")
test <- follow_link(my_session, "LOTTO DRAW 1839")
test <- follow_link(my_session, "LOTTO DRAW 1839")
my_session$handle
test <- follow_link(my_session, "SEARCH")
test <- follow_link(my_session, "LOTTO PLUS 1")
my_session <- html_session("https://www.nationallottery.co.za/lotto-history")
test <- follow_link(my_session, "LOTTO PLUS 1")
test <- follow_link(my_session, "Powerball")
test <- follow_link(my_session, "PowerBall")
test <- follow_link(my_session, "dataCounter10.ank")
my_session %>% html_nodes("#dataCounter-10 .ank")
my_session %>% html_nodes(".ank")
follow_link(my_session, my_session %>% html_nodes(".ank"))
test <- follow_link(my_session, "Lotto Draw 10")
test <- follow_link(my_session, "Lotto Draw 1838")
test <- follow_link(my_session, "Lotto Draw 1839")
my_session
test <- follow_link(my_session, "Lotto Draw '+value.drawNumber+'")
test
test <- follow_link(my_session, "Lotto Draw 9")
test <- follow_link(my_session, "Lotto Draw 10")
test <- follow_link(my_session, "Lotto Draw 1")
test <- follow_link(my_session, "Lotto Draw 01")
test <- follow_link(my_session, "Lotto Draw dataCounter10")
my_session %>% html_nodes(".ank")
test <- follow_link(my_session, "Lotto Draw10")
test <- follow_link(my_session, "Lotto Draw '10'")
test <- follow_link(my_session, "Lotto Draw '9'")
test <- follow_link(my_session, "Lotto Draw")
test <- follow_link(my_session, "LOTTO DRAW 10")
test <- follow_link(my_session, "LOTTO DRAW 9")
test <- follow_link(my_session, "Lotto Draw 9")
test <- follow_link(my_session, "Lotto Draw 1838")
test <- follow_link(my_session, "Lotto Draw1838")
library(RSelenium)
mybrowser <- remoteDriver()
mybrowser$open()
mybrowser$open()
mybrowser$errorDetails()
lotto <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto.csv")
head(lotto)
lotto <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto.csv")
lotto1 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto.csv")
lotto1
head(lotto1)
dim(lotto)
plot(sales ~ rollover_amount, lotto1)
lotto2 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto.csv")
plot(sales ~ rollover_amount, lotto2)
plot(sales ~ rollover_amount, lotto1)
lotto1 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto1.csv")
lotto2 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto2.csv")
dim(lotto1)
plot(sales ~ rollover_amount, lotto1)
plot(sales ~ rollover_amount, lotto2)
plot(lotto1$sales ~ lotto$rollover_amount)
plot(lotto2$sales ~ lotto$rollover_amount)
plot(lotto1$sales ~ lotto$rollover_amount)
plot(lotto$sales ~ lotto$rollover_amount)
plot(sales ~ rollover_amount, lotto2)
plot(lotto1$sales ~ lotto$rollover_amount)
plot(lotto1$sales ~ lotto$rollover_amount, col = weekdays(lotto$date))
plot(lotto1$sales ~ lotto$rollover_amount, col = as.numeric(weekdays(lotto$date)))
weekdays(lotto$date)
lotto$date
library(dplyr)
?mutate
transform
?dplyr::transform
?dplyr::transmute
lotto %>% mutate(date = as.Date(date, "%Y-%b-%d"))
lotto <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
lotto1 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto1.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
lotto2 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto2.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
plot(lotto1$sales ~ lotto$rollover_amount, col = weekdays(lotto$date))
plot(lotto1$sales ~ lotto$rollover_amount, col = as.numeric(weekdays(lotto$date)))
plot(lotto1$sales ~ lotto$rollover_amount, col = factor(weekdays(lotto$date)))
plot(lotto2$sales ~ lotto$rollover_amount, col = factor(weekdays(lotto$date)))
lotto2[lotto$rollover_amount == 0,]
plot(lotto1$sales ~ lotto$rollover_amount, col = factor(weekdays(lotto$date)))
lotto <- lotto %>% filter(date != "2018-Jan-27")
lotto1 <- lotto1 %>% filter(date != "2018-Jan-27")
lotto <- lotto %>% filter(date != "2018-1-27")
lotto1 <- lotto1 %>% filter(date != "2018-1-27")
plot(lotto1$sales ~ lotto$rollover_amount, col = factor(weekdays(lotto$date)))
lm(lotto1$sales ~ lotto$rollover_amount)
lm(lotto1$sales ~ lotto$rollover_amount + I(lotto$rollover_amount^2))
anova(lm(lotto1$sales ~ lotto$rollover_amount + I(lotto$rollover_amount^2)))
lm(lotto1$sales ~ I(lotto$rollover_amount > 0) + lotto$rollover_amount + I(lotto$rollover_amount^2))
anova(lm(lotto1$sales ~ I(lotto$rollover_amount > 0) + lotto$rollover_amount + I(lotto$rollover_amount^2)))
lm(lotto1$sales ~ I(weekdays(lotto$date))*(I(lotto$rollover_amount > 0) + lotto$rollover_amount + I(lotto$rollover_amount^2)))
anova(lm(lotto1$sales ~ I(weekdays(lotto$date))*(I(lotto$rollover_amount > 0) + lotto$rollover_amount + I(lotto$rollover_amount^2))))
anova(lm(lotto1$sales ~ I(weekdays(lotto$date))*(I(lotto$rollover_amount > 0) + lotto$rollover_amount + I(lotto$rollover_amount^2))))
my_model <- lm(lotto1$sales ~ I(weekdays(lotto$date))*(I(lotto$rollover_amount > 0) + lotto$rollover_amount + I(lotto$rollover_amount^2)))
lotto <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"), rollover_amount = rollover_amount/1e6)
lotto <- lotto %>% filter(date != "2018-1-27")
my_model <- lm(lotto1$sales ~ I(weekdays(lotto$date))*(I(lotto$rollover_amount > 0) + lotto$rollover_amount + I(lotto$rollover_amount^2)))
my_model
plot(lotto1$sales ~ lotto$rollover_amount, col = factor(weekdays(lotto$date)))
rojp <- seq(0,100, 1)
lotto <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"), rollover_amount = rollover_amount/1e6, day = weekdays(date))
head(lotto)
my_model <- lm(lotto1$sales ~ I(lotto$day)*(I(lotto$rollover_amount > 0) + lotto$rollover_amount + I(lotto$rollover_amount^2)))
lotto <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"), rollover_amount = rollover_amount/1e6, day = weekdays(date))
lotto1 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto1.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
lotto2 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto2.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
lotto <- lotto %>% filter(date != "2018-1-27")
lotto1 <- lotto1 %>% filter(date != "2018-1-27")
my_model <- lm(lotto1$sales ~ I(lotto$day)*(I(lotto$rollover_amount > 0) + lotto$rollover_amount + I(lotto$rollover_amount^2)))
my_model
lines(rojp, predict(my_model, data.frame(rollover_amount = rojp, day = "Wednesday")))
lines(rojp, predict(my_model, data.frame(rollover_amount = rojp, 'lotto$day' = "Wednesday")))
lines(rojp, predict(my_model, data.frame('lotto$rollover_amount' = rojp, 'lotto$day' = "Wednesday")))
my_data <- data.frame(sales = lotto1$sales, date = lotto$date, rojp = lotto$rollover_amount/1e6) %>% filter(date != "2018-1-27")
my_data <- data.frame(sales = lotto1$sales, date = lotto$date, rojp = lotto$rollover_amount/1e6) %>% mutate(day = weekdays(date)) %>% filter(date != "2018-1-27")
plot(sales ~ rojp, my_data, col = day)
plot(sales ~ rojp, my_data, col = factor(day))
my_model <- lm(sales ~ I(day)*(I(rojp > 0) + rojp + I(rojp^2)))
my_model <- lm(sales ~ I(day)*(I(rojp > 0) + rojp + I(rojp^2)), data = my_data)
my_model
my_data <- data.frame(sales = lotto1$sales, date = lotto$date, rojp = lotto$rollover_amount/1e6) %>% mutate(day = weekdays(date)) %>% filter(date != "2018-1-27")
my_model <- lm(sales ~ I(day)*(I(rojp > 0) + rojp + I(rojp^2)), data = my_data)
my_model
my_data$rojp
lotto <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
lotto1 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto1.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
lotto2 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto2.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
my_data <- data.frame(sales = lotto1$sales, date = lotto$date, rojp = lotto$rollover_amount/1e6) %>% mutate(day = weekdays(date)) %>% filter(date != "2018-1-27")
my_model <- lm(sales ~ I(day)*(I(rojp > 0) + rojp + I(rojp^2)), data = my_data)
my_model
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Wednesday")))
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Saturday")))
my_model
predict(my_model, data.frame(rojp = rojp, day = "Wednesday")
)
plot(sales ~ rojp, my_data, col = factor(day))
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Wednesday")))
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Wednesday")), col = 2)
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Saturday")), col = 1)
library(dplyr)
lotto <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
lotto1 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto1.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
lotto2 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto2.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
my_data <- data.frame(sales = lotto1$sales, date = lotto$date, rojp = lotto$rollover_amount/1e6) %>% mutate(day = weekdays(date)) %>% filter(date != "2018-1-27")
my_model <- lm(sales ~ I(day)*(I(rojp > 0) + rojp + I(rojp^2)), data = my_data)
rojp <- seq(0,100, 1)
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Wednesday")), col = 2)
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Saturday")), col = 1)
my_model <- lm(sales ~ I(day)*(I(rojp > 0) + rojp + I(rojp^2)), data = my_data)
rojp <- seq(0,100, 0.01)
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Wednesday")), col = 2)
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Saturday")), col = 1)
my_model <- lm(sales ~ I(day)*(I(rojp > 0) + rojp + I(rojp^2)), data = my_data)
rojp <- seq(0,100, 0.01)
plot(sales ~ rojp, my_data, col = factor(day))
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Wednesday")), col = 2)
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Saturday")), col = 1)
rojp <- seq(1,100, 0.01)
plot(sales ~ rojp, my_data, col = factor(day))
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Wednesday")), col = 2)
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Saturday")), col = 1)
plot(sales ~ rollover_amount, lotto1)
plot(sales ~ rollover_amount, lotto1, col = weekdays(dae))
plot(sales ~ rollover_amount, lotto1, col = weekdays(date))
plot(sales ~ rollover_amount, lotto1, col = as.numeric(weekdays(date)))
plot(sales ~ rollover_amount, data = lotto1, col = as.numeric(weekdays(date)))
plot(sales ~ rollover_amount, lotto1)
plot(lotto1$sales ~ lotto$rollover_amount)
plot(lotto1$sales ~ lotto$rollover_amount, col = as.numeric(weekdays(lotto$date)))
lotto$date
weekdays(lotto$date)
plot(lotto1$sales ~ lotto$rollover_amount, col = as.numeric(weekdays(lotto$date)))
library(dplyr)
lotto <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
lotto1 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto1.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
lotto2 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto2.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
my_data <- data.frame(sales = lotto1$sales, date = lotto$date, rojp = lotto$rollover_amount/1e6) %>% mutate(day = weekdays(date)) %>% filter(date != "2018-1-27")
my_model <- lm(sales ~ I(day)*(I(rojp > 0) + rojp + I(rojp^2)), data = my_data)
rojp <- seq(1,100, 0.01)
plot(sales ~ rojp, my_data, col = factor(day))
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Wednesday")), col = 2)
lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Saturday")), col = 1)
my_model
anova(my_model)
source("~/GitHub/modelling_report/R/common.R")
source("~/GitHub/R/tyche/margin_automation.R")
source("~/GitHub/R/currencies/currencies.R")
source("~/GitHub/R/tyche/zoe/ms_from_zoe.R")
source("~/GitHub/R/tyche/cost_per_bet.R")
library(dplyr)
library(xlsx)
# lotto <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
# lotto1 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto1.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
# lotto2 <- read.csv("~/GitHub/R/data_extractors/za_lotto/extracted_data_lotto2.csv") %>% mutate(date = as.Date(date, "%Y-%b-%d"))
#
# my_data <- data.frame(bets = lotto1$sales/2.5, date = lotto$date, rojp = lotto$rollover_amount/1e6) %>% mutate(day = weekdays(date)) %>% filter(date != "2018-1-27")
#
# my_model <- irls(lm(bets ~ I(day)*(I(rojp > 0) + rojp + I(rojp^2)), data = my_data), wfunc = function(x){1/x$fit^2}, 0.000001)
# rojp <- seq(1,100, 0.01)
# plot(bets ~ rojp, my_data, col = factor(day))
# lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Wednesday")), col = 2)
# lines(rojp, predict(my_model, data.frame(rojp = rojp, day = "Saturday")), col = 1)
#
# coefs <- my_model$coefficients
# sat_c <- coefs[c(1,3,4,5)]
# wed_c <- c(sum(coefs[1:2]), sum(coefs[c(3,6)]), sum(coefs[c(4,7)]), sum(coefs[c(5,8)]))
x <- read_losses("~/GitHub/R/sims/output_110")
x <- x*1.1818
r_layer <- tyche_cost(x[,1], 1, 0, make_layer_f(30e6, 0), "retention")
c_layer <- tyche_cost(x[,1], 1.35, 0.12, make_layer_f(30e6, 30e6), "c_layer")
b_layer <- tyche_cost(x[,1], 1.35, 0.12, make_layer_f(30e6, 60e6), "b_layer")
a_layer <- tyche_cost(x[,1], 1.35, 0.12, make_layer_f(30e6, 90e6), "a_layer")
trad_layer <- trad_ins_cost(1.6, 0.12, make_layer_f(33e6, 109864597), "trad_layer")
tower <- list(r_layer, c_layer, b_layer, a_layer, trad_layer)
download.file(url = 'https://www.ecb.europa.eu/stats/eurofxref/eurofxref-hist.zip', destfile = 'exchange_rate.zip')
unzip("exchange_rate.zip")
file.remove("exchange_rate.zip")
jackpot <- as.matrix(read.table("~/Desktop/Games/SA_Lotto/zalp1/zal1_jackpot.txt"))[1:2,]
out <- margins_block(jackpot = zar(c(jackpot)), lower_costs = zar(0.855324), bet_price = zar(2.5), odds = 20358520, tower = tower)
write.table(out, file = "zal1_costs.txt", row.names = F)
library(rvest)
my_session <- html_session("https://www.lotto-hessen.de/lotto6aus49/teilnahmebedingungen?gbn=5")
follow_link(my_session, "LOTTO 6aus49")
pdf <- follow_link(my_session, "LOTTO 6aus49")
pdf$url
follow_link(my_session, "LOTTO 6aus50")
follow_link(my_session, "LOTTO 6aus49 ABO")
follow_link(my_session, "LOTTO 6aus49")
follow_link(my_session, "LOTTO 6aus49 ABO")
follow_link(my_session, "LOTTO 6aus49")
follow_link(my_session, "Super 6")
follow_link(my_session, "SUPER 6")
follow_link(my_session, "LOTTO 6aus49")
follow_link(my_session, "LOTTO 6aus49")
my_session$url
help.search("md5")
install.packages("sendmailR")
sendmailR::sendmail(from = "george.papath2@gmai.com", to = "g.sermaidis@gmail.com", subject = "Test R", msg = "tesagdsg", control = list(smtpServer = "smpt.gmail.com"))
sendmailR::sendmail(from = "george.papath2@gmai.com", to = "g.sermaidis@gmail.com", subject = "Test R", msg = "tesagdsg", control = list(smtpServer = "smtp.gmail.com"))
sendmailR::sendmail(from = "george.papath2@gmai.com", to = "g.sermaidis@gmail.com", subject = "Test R", msg = "tesagdsg", control = list(smtpServer = "smtp.gmail.com"))
?sendmailR::sendmail
sendmailR::sendmail(from = "george.papath2@gmai.com", to = "g.sermaidis@gmail.com", subject = "Test R", msg = "tesagdsg", control=list(smtpServer="ASPMX.L.GOOGLE.COM")))
sendmailR::sendmail(from = "george.papath2@gmai.com", to = "g.sermaidis@gmail.com", subject = "Test R", msg = "tesagdsg", control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
sendmailR::sendmail(from = "<george.papath2@gmai.com>", to = "<g.sermaidis@gmail.com>", subject = "Test R", msg = "tesagdsg", control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
sendmailR::sendmail(from = "<george.papath2@gmai.com>", to = "<g.sermaidis@gmail.com>", subject = "Test R", msg = "tesagdsg", control=list(smtpServer="smtp.gmail.com"))
sendmailR::sendmail(from = "<george.papath2@gmai.com>", to = "<g.sermaidis@gmail.com>", subject = "Test R", msg = "tesagdsg", control=list(smtpServer="ASPMX.L.GOOGLE.COM"))
sendmailR::sendmail(from = "george.papath2@gmai.com", to = "g.sermaidis@gmail.com", subject = "Test R", msg = "tesagdsg", control=list(host.name="smtp.gmai.com"))
sendmailR::sendmail(from = "george.papath2@gmai.com", to = "g.sermaidis@gmail.com", subject = "Test R", msg = "tesagdsg", control=list(host.name="smtp.gmai.com", port = 465))
sendmailR::sendmail(from = "george.papath2@gmai.com", to = "g.sermaidis@gmail.com", subject = "Test R", msg = "tesagdsg", control=list(host.name="smtp.gmai.com", port = 465, user.name = "george.papath2@gmail.com", passwd = "a8imk3QJrVWv"))
sendmailR::sendmail(from = "george.papath2@gmai.com", to = "g.sermaidis@gmail.com", subject = "Test R", msg = "tesagdsg", control=list(host.name="smtp.gmai.com", port = 465, user.name = "george.papath2@gmail.com", passwd = "a8imk3QJrVWv", ssl = TRUE))
sendmailR::sendmail(from = "george.papath2@gmai.com", to = "g.sermaidis@gmail.com", subject = "Test R", msg = "tesagdsg", control=list(host.name="smtp.gmai.com", port = 465, user.name = "george.papath2@gmail.com", passwd = "a8imk3QJrVWv", ssl = TRUE), authenticate = TRUE)
install.packages("mailR")
mailR::send.mail(from = "george.papath2@gmai.com", to = "g.sermaidis@gmail.com", subject = "Test R", msg = "tesagdsg", control=list(host.name="smtp.gmai.com", port = 465, user.name = "george.papath2@gmail.com", passwd = "a8imk3QJrVWv", ssl = TRUE), authenticate = TRUE)
mailR::send.mail(from = "george.papath2@gmai.com", to = "g.sermaidis@gmail.com", subject = "Test R", body = "tesagdsg", control=list(host.name="smtp.gmai.com", port = 465, user.name = "george.papath2@gmail.com", passwd = "a8imk3QJrVWv", ssl = TRUE), authenticate = TRUE)
?mailR::send.mail
mailR::send.mail(from = "george.papath2@gmail.com", to = "g.sermaidis@gmail.com", subject = "Test", body = "test", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name="george.papath2@gmail.com", passwd="a8imk3QJrVWv", ssl=TRUE))
mailR::send.mail(from = "george.papath2@gmail.com", to = "g.sermaidis@gmail.com", subject = "Test", body = "test", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name="george.papath2@gmail.com", passwd="a8imk3QJrVWv", ssl=TRUE), authenticate = TRUE, send = TRUE)
mailR::send.mail(from = "george.papath2@gmail.com", to = "g.sermaidis@gmail.com", subject = "Test", body = "test", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name="george.papath2@gmail.com", passwd="a8imk3QJrVWv", ssl=TRUE), authenticate = TRUE, send = TRUE)
setwd("~/GitHub/rules_monitor/")
setwd("~/GitHub/rules_monitor/german_lotto/")
download.file(url = "https://www.lotto-hessen.de/imperia/md/content/pfe3rd/teilnahmebedingungen/online/i-tb_lotto_6aus49_14.06.2018.pdf", destfile = "today_rules.pdf")
ml24_md5 <- tools::md5sum("today_rules.pdf")
ml24_md5
today_md5 <- tools::md5sum("ml24_rules.pdf")
download.file(url = "https://www.lotto-hessen.de/imperia/md/content/pfe3rd/teilnahmebedingungen/online/i-tb_lotto_6aus49_14.05.2018.pdf", destfile = "today_rules.pdf")
url("https://www.lotto-hessen.de/imperia/md/content/pfe3rd/teilnahmebedingungen/online/i-tb_lotto_6aus49_14.06.2018.pdf")
url("https://www.lotto-hessen.de/imperia/md/content/pfe3rd/teilnahmebedingungen/online/i-tb_lotto_6aus49_14.05.2018.pdf")
readLines(url("https://www.lotto-hessen.de/imperia/md/content/pfe3rd/teilnahmebedingungen/online/i-tb_lotto_6aus49_14.05.2018.pdf"))
install.packages("RCurl")
library(RCurl)
url.exists("https://www.lotto-hessen.de/imperia/md/content/pfe3rd/teilnahmebedingungen/online/i-tb_lotto_6aus49_14.06.2018.pdf")
library(mailR)
mailR::send.mail(from = "george.papath2@gmail.com", to = "georgios.sermaidis@mylotto24.co.uk", subject = "Potentional German Lotto rule change", body = "", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "george.papath2@gmail.com", passwd = "a8imk3QJrVWv", ssl = TRUE))
mailR::send.mail(from = "george.papath2@gmail.com", to = "georgios.sermaidis@mylotto24.co.uk", subject = "Potentional German Lotto rule change", body = "", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "george.papath2@gmail.com", passwd = "a8imk3QJrVWv", ssl = TRUE), authenticate = TRUE)
mailR::send.mail(from = "george.papath2@gmail.com", to = "georgios.sermaidis@mylotto24.co.uk", subject = "Potentional German Lotto rule change", body = "Testing", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "george.papath2@gmail.com", passwd = "a8imk3QJrVWv", ssl = TRUE), authenticate = TRUE)
mailR::send.mail(from = "george.papath2@gmail.com", to = "georgios.sermaidis@mylotto24.co.uk", subject = "Potentional German Lotto rule change", body = "Testing", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "george.papath2@gmail.com", passwd = "a8imk3QJrVWv", ssl = TRUE), authenticate = TRUE)
mailR::send.mail(from = "george.papath2@gmail.com", to = "georgios.sermaidis@mylotto24.co.uk", subject = "Potentional German Lotto rule change", body = "Testing", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name = "george.papath2@gmail.com", passwd = "a8imk3QJrVWv", ssl = TRUE), authenticate = TRUE, send = TRUE)
mailR::send.mail(from = "george.papath2@gmail.com", to = "g.sermaidis@gmail.com", subject = "Test", body = "test", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name="george.papath2@gmail.com", passwd="a8imk3QJrVWv", ssl=TRUE), authenticate = TRUE, send = TRUE)
mailR::send.mail(from = "george.papath2@gmail.com", to = "g.sermaidis@gmail.com", subject = "Test", body = "test", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name="george.papath2@gmail.com", passwd="a8imk3QJrVWv", ssl=TRUE), authenticate = TRUE, send = TRUE)
mailR::send.mail(from = "george.papath2@gmail.com", to = "g.sermaidis@gmail.com", subject = "Test", body = "test", smtp = list(host.name = "smtp.gmail.com", port = 465, user.name="george.papath2@gmail.com", passwd="a8imk3QJrVWv", ssl=TRUE), authenticate = TRUE, send = TRUE, debug = T)
Sys.getenv("JAVA_HOME")
tryCatch(dasfds, error = get(e){print(r)})
tryCatch(dasfds, error = get(e){print(e)})
tryCatch(dasfds, error = function(e){print(e)})
library(RSelenium)
library(magrittr)
source("~/GitHub/R/tools/tools.R")
check_rule_change <- function(browser, partial_link_name, game_name) {
firefox$navigate("https://www.lotto-hessen.de/lotto6aus49/teilnahmebedingungen?gbn=5")
pdf_link <- firefox$findElement("class", "download-list")$findChildElement("partial link text", partial_link_name)$getElementAttribute("href")[[1]]
download.file(pdf_link, "today_rules.pdf")
today_md5 <- tools::md5sum("today_rules.pdf")
ml24_md5 <- tools::md5sum("ml24_rules.pdf")
if(today_md5 != ml24_md5) send_email("georgios.sermaidis@mylotto24.co.uk", paste0("Potentional rule change for ", game_name), "")
file.remove("today_rules.pdf")
file.remove("run.Rout")
}
browser <- rsDriver(browser = "firefox")
firefox <- browser$client
check_rule_change(firefox, "LOTTO 6aus49", "German Lotto")
check_rule_change <- function(browser, partial_link_name, game_name) {
firefox$navigate("https://www.lotto-hessen.de/lotto6aus49/teilnahmebedingungen?gbn=5")
pdf_link <- firefox$findElement("class", "download-list")$findChildElement("partial link text", partial_link_name)$getElementAttribute("href")[[1]]
download.file(pdf_link, "today_rules.pdf")
today_md5 <- tools::md5sum("today_rules.pdf")
ml24_md5 <- tools::md5sum("ml24_rules.pdf")
if(today_md5 != ml24_md5) send_email("georgios.sermaidis@mylotto24.co.uk", paste0("Potentional rule change for ", game_name), "")
# file.remove("today_rules.pdf")
file.remove("run.Rout")
}
check_rule_change(firefox, "LOTTO 6aus49", "German Lotto")
setwd("../spiel77/")
debug(check_rule_change)
check_rule_change(firefox, "Spiel 77", "Spiel77")
today_md5 == ml24_md5
check_rule_change <- function(browser, partial_link_name, game_name) {
firefox$navigate("https://www.lotto-hessen.de/lotto6aus49/teilnahmebedingungen?gbn=5")
pdf_link <- firefox$findElement("class", "download-list")$findChildElement("partial link text", partial_link_name)$getElementAttribute("href")[[1]]
download.file(pdf_link, "today_rules.pdf")
today_md5 <- tools::md5sum("today_rules.pdf")
ml24_md5 <- tools::md5sum("ml24_rules.pdf")
if(today_md5 != ml24_md5) send_email("georgios.sermaidis@mylotto24.co.uk", paste0("Potentional rule change for ", game_name), "")
file.remove("today_rules.pdf")
file.remove("run.Rout")
}
try_hessen_check_rule_change(firefox, "GlücksSpirale", "GlücksSpirale")
source("~/GitHub/rules_monitor/tools.R")
setwd("../gluckspirale/")
debug(hessen_check_rule_change)
try_hessen_check_rule_change(firefox, "GlücksSpirale", "GlucksSpirale")
source("~/GitHub/rules_monitor/tools.R")
browser <- RSelenium::rsDriver(browser = "firefox")
firefox <- browser$client
debug(hessen_check_rule_change)
try_hessen_check_rule_change(firefox, "GlücksSpirale", "GlucksSpirale")
pdf_link
ml24_md5
today_md5
today_md5 != ml24_md5
debug(send_email)
send_email("georgios.sermaidis@mylotto24.co.uk", paste0("Potentional rule change for ", game_name), "")
b
command
source("../tools.R")
driver <- RSelenium::rsDriver(browser = "chrome")
browser <- driver$client
tryCatch(pdf_rule_change(browser, hessen_lotto_rules_page, "GlucksSpirale", function(b){
b$findElement("xpath", "//*[text()[contains(., 'GlücksSpirale')]]")
}), error = on_rule_error("GlucksSpirale"))
browser$close()
