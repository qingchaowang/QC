e_dates <- y$date[c(5,6, 21:27)]
y <- split(x[["ejp"]], 1:nrow(x[["ejp"]]))
res <- lapply(y, function(r) {
x1 <- r
x1$"off-risk" <- "Y"
x1$jackpot <- 0.2*r$jackpot
x2 <- r
if(r$date %in% e_dates) x1$bets <- floor(0.75*r$bets)
else x1$bets <- 10000
x2$bets <- r$bets - x1$bets
rbind(x1, x2)
})
res[[1]]
do.call(rbind, res)
x[["ejp"]] <- do.call(rbind, res)
x[["ejp"]]
sapply(x, dim)
x <- do.call(rbind, x)
x
tail(x)
getwd()
write.table(x, "~/Work/Projects/EJS_Lotter/ms/lotter_10.txt", quote = F, row.names = F, col.names = F)
x <- read.table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
colnames(x) <- c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds")
x <- split(x, x$game)
rownames(y) <- NULL
e_dates <- y$date[c(5,6, 21:27)]
y <- split(x[["ejp"]], 1:nrow(x[["ejp"]]))
res <- lapply(y, function(r) {
x1 <- r
x1$"off-risk" <- "Y"
x1$jackpot <- 0.2*r$jackpot
x2 <- r
if(r$date %in% e_dates) x1$bets <- floor(0.75*r$bets)
else x1$bets <- 10000
x2$bets <- r$bets - x1$bets
rbind(x1, x2)
})
x[["ejp"]] <- do.call(rbind, res)
x <- do.call(rbind, x)
write.table(x, "~/Work/Projects/EJS_Lotter/ms/lotter_10.txt", quote = F, row.names = F, col.names = F)
library(shiny)
library(shinythemes)
library(DT)
library(shinycssloaders)
source("~/GitHub/R/user_interface/modules/layers_config.R")
source("~/GitHub/R/user_interface/modules/controls_module.R")
source("~/GitHub/R/user_interface/modules/results_module.R")
ui <- fluidPage(h1("Monitoring Sheet Analysis"),
fluidRow(
column(width = 2,
wellPanel(controls_module_ui)
),
column(width = 4,
wellPanel(layer_module_ui)
),
column(width = 6,
results_module_ui %>% withSpinner()
))
)
server <- function(input, output, session) {
layers <- layer_module()
command <- controls_module(layers$data)
results <- results_module(command$data, layers$data)
layers$server(input, output, session)
command$server(input, output, session)
results$server(input, output, session)
}
sort_gel <- function(file_name) {
x <- read.table("con_gel.txt")[,-3]
total_el <- sum(x[,2])
x$pct <- x[,2]/total_el
x <- x[order(x[,2], decreasing = T),]
colnames(x) <- c("Game", "Ground up EL", "% of Total")
x
}
read_metrics <- function(file_name) {
files <- system2("ls", stdout = TRUE)
files <- files[grep(file_name, files)]
x <- lapply(files, read.table)
y <- x[[1]]
y[,-c(1:3)] <- 0
for(i in 1:length(x)) y[,-c(1:3)] <- y[,-c(1:3)] + x[[i]][,-c(1:3)]
y[,-c(1:3)] <- y[,-c(1:3)]/length(x)
y[,1] <- as.Date(y[,1], "%Y-%b-%d")
n_layers <- (ncol(y) - 2)/3
out <- list()
for(i in 1:n_layers) {
result <- cbind(y[,1:2], y[,(3*i):(3*i+2)])
colnames(result) <- c("Date", "Game", "AP", "EL", "EP")
result$"dEL" <- c(result$EL[1], diff(result$EL))
out[[i]] <- result[nrow(result):1, ]
}
out
}
shinyApp(ui, server)
x <- read.table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
colnames(x) <- c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds")
x <- split(x, x$game)
rownames(y) <- NULL
e_dates <- y$date[c(5,6, 21:27)]
e_dates
x <- read.table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
colnames(x) <- c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds")
x <- split(x, x$game)
x <- read.table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
colnames(x) <- c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds")
x <- split(x, x$game)
e_dates <- x[["ejp"]]$date[c(5,6, 21:27)]
e_dates
x <- read.table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
colnames(x) <- c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds")
x <- split(x, x$game)
e_dates <- x[["ejp"]]$date[c(5,6, 21:27)]
y <- split(x[["ejp"]], 1:nrow(x[["ejp"]]))
res <- lapply(y, function(r) {
x1 <- r
x1$"off-risk" <- "Y"
x1$jackpot <- 0.2*r$jackpot
x2 <- r
if(r$date %in% e_dates) x1$bets <- floor(0.75*r$bets)
else x1$bets <- 10000
x2$bets <- r$bets - x1$bets
rbind(x1, x2)
})
x[["ejp"]] <- do.call(rbind, res)
x <- do.call(rbind, x)
write.table(x, "~/Work/Projects/EJS_Lotter/ms/lotter_10.txt", quote = F, row.names = F, col.names = F)
library(shiny)
library(shinythemes)
library(DT)
library(shinycssloaders)
source("~/GitHub/R/user_interface/modules/layers_config.R")
source("~/GitHub/R/user_interface/modules/controls_module.R")
source("~/GitHub/R/user_interface/modules/results_module.R")
ui <- fluidPage(h1("Monitoring Sheet Analysis"),
fluidRow(
column(width = 2,
wellPanel(controls_module_ui)
),
column(width = 4,
wellPanel(layer_module_ui)
),
column(width = 6,
results_module_ui %>% withSpinner()
))
)
server <- function(input, output, session) {
layers <- layer_module()
command <- controls_module(layers$data)
results <- results_module(command$data, layers$data)
layers$server(input, output, session)
command$server(input, output, session)
results$server(input, output, session)
}
sort_gel <- function(file_name) {
x <- read.table("con_gel.txt")[,-3]
total_el <- sum(x[,2])
x$pct <- x[,2]/total_el
x <- x[order(x[,2], decreasing = T),]
colnames(x) <- c("Game", "Ground up EL", "% of Total")
x
}
read_metrics <- function(file_name) {
files <- system2("ls", stdout = TRUE)
files <- files[grep(file_name, files)]
x <- lapply(files, read.table)
y <- x[[1]]
y[,-c(1:3)] <- 0
for(i in 1:length(x)) y[,-c(1:3)] <- y[,-c(1:3)] + x[[i]][,-c(1:3)]
y[,-c(1:3)] <- y[,-c(1:3)]/length(x)
y[,1] <- as.Date(y[,1], "%Y-%b-%d")
n_layers <- (ncol(y) - 2)/3
out <- list()
for(i in 1:n_layers) {
result <- cbind(y[,1:2], y[,(3*i):(3*i+2)])
colnames(result) <- c("Date", "Game", "AP", "EL", "EP")
result$"dEL" <- c(result$EL[1], diff(result$EL))
out[[i]] <- result[nrow(result):1, ]
}
out
}
shinyApp(ui, server)
x <- read.table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
colnames(x) <- c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds")
x <- read.table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
colnames(x) <- c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds")
x$stakes <- 0
x$stakes <- 0
x$stakes[x$game == "glp"] <- x$bets[x$game == "glp"]
x$stakes[x$game == "emp"] <- x$bets[x$game == "emp"]*3
x$stakes[x$game == "ejp"] <- x$bets[x$game == "ejp"]*2
x$stakes[x$game == "pbp"] <- x$bets[x$game == "pbp"]*3.5
x$stakes[x$game == "mmp"] <- x$bets[x$game == "mmp"]*3.5
x$stakes[x$game == "irlp"] <- x$bets[x$game == "irlp"]*2
head(x)
write.table(x, file = "~/Work/Projects/EJS_Lotter/bets.txt", row.names = F, quote = F)
x[[1]]
x[1,]
x[1,]$`off-risk`
x[["ejp"]]
x <- read.table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
colnames(x) <- c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds")
head(x)
y <- split(x, x$game)
y[[1]]
z <- split(y[[1]], 1:nrow(y[[1]]))
z
lapply(z, function(r){r[order(r$"off-risk"),]})
order(c("Y", "N"))
sapply(z, function(r){r[order(r$"off-risk"),]})
lapply(z, function(r){r[order(r$"off-risk"),]})
read_ms <- function(file) {
x <- read.table(file)
colnames(x) <- c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds")
y <- split(x, x$game)
y <- lapply(y, function(z) {
sz <- split(z, 1:nrow(z))
do.call(rbind, lapply(sz, function(r){r[order(r$"off-risk"),]}))
})
do.call(rbind, y)
}
x <- read_ms("~/Work/Projects/EJS_Lotter/ms/actual.txt")
head(x)
read_ms <- function(file) {
x <- read.table(file)
colnames(x) <- c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds")
y <- split(x, x$game)
y <- lapply(y, function(z) {
sz <- split(z, 1:nrow(z))
do.call(rbind, lapply(sz, function(r){r[order(r$"off-risk"),]}))
})
y <- do.call(rbind, y)
rownames(y) <- NULL
y
}
x <- read_ms("~/Work/Projects/EJS_Lotter/ms/actual.txt")
head(y)
head(x)
x <- read.table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
colnames(x) <- c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds")
head(x)
lapply(split(x, 1:nrow(x)), function(r) {
hedged_stakes <- sum((r$"off_risk" == "Y")*r$stakes)
total_stakes <- sum(r$stakes)
c(hedged_stakes, total_stakes)
})
sapply(split(x, 1:nrow(x)), function(r) {
hedged_stakes <- sum((r$"off_risk" == "Y")*r$stakes)
total_stakes <- sum(r$stakes)
c(hedged_stakes, total_stakes)
})
lapply(split(x, 1:nrow(x)), function(r) {
hedged_stakes <- sum((r$"off_risk" == "Y")*r$stakes)
total_stakes <- sum(r$stakes)
c(hedged_stakes, total_stakes)
})
stakes <- lapply(split(x, 1:nrow(x)), function(r) {
hedged_stakes <- sum((r$"off_risk" == "Y")*r$stakes)
total_stakes <- sum(r$stakes)
c(hedged_stakes, total_stakes)
})
stakes <- do.call(rbind, stakes)
stakes
tail(stakes)
head(x)
x$stakes <- 0
x$stakes[x$game == "glp"] <- x$bets[x$game == "glp"]
x$stakes[x$game == "emp"] <- x$bets[x$game == "emp"]*3
x$stakes[x$game == "ejp"] <- x$bets[x$game == "ejp"]*2
x$stakes[x$game == "pbp"] <- x$bets[x$game == "pbp"]*3.5
x$stakes[x$game == "mmp"] <- x$bets[x$game == "mmp"]*3.5
x$stakes[x$game == "irlp"] <- x$bets[x$game == "irlp"]*2
stakes <- lapply(split(x, 1:nrow(x)), function(r) {
hedged_stakes <- sum((r$"off_risk" == "Y")*r$stakes)
total_stakes <- sum(r$stakes)
c(hedged_stakes, total_stakes)
})
stakes <- do.call(rbind, stakes)
stakes
tail(stakes)
head(x)
x
stakes[82,]
?aggregate
aggregate(x, list(x$game, x$date))
aggregate(x, list(x$game, x$date), function(r){
hedged_stakes <- sum((r$"off_risk" == "Y")*r$stakes)
total_stakes <- sum(r$stakes)
c(hedged_stakes, total_stakes)
})
aggregate(x, list(x$game, x$date), function(r){
hedged_stakes <- sum((r[,"off_risk"] == "Y")*r[,"stakes"])
total_stakes <- sum(r[,"stakes"])
c(hedged_stakes, total_stakes)
})
aggregate(x, list(x$game, x$date), function(r){
print(r)
})
aggregate(x[1:10,], list(x$game, x$date), function(r){
cat(r)
})
aggregate(x[1:10,], list(x$game, x$date), function(r){
print(r)
})
x[1:10,]
aggregate(x[1:10,], list(x$date), function(r){
print(r)
})
aggregate
aggregate.data.frame
aggregate(x[1:10,], list(x$date), function(r){
print(r)
})
aggregate(x[1:100,], list(x$date), function(r){
print(r)
})
aggregate(x, list(x$date), function(r){
print(r)
})
dim(x)
print(x[1,])
print(x[2,])
split(x, list(x$game, x$date))
split(x, list(x$game, x$date), drop = T)
?unsplit
split(x, list(x$game, x$date), drop = T)
unsplit(x, list(x$game, x$date))
unsplit(split(x, list(x$game, x$date), drop = T))
unsplit(split(x, list(x$game, x$date), drop = T), list(x$game, x$date))
stakes <- lapply(split(x, x$game), function(d) {
do.call(rbind, lapply(split(d, d$date), get_stakes))
})
get_stakes <- function(r) {
hedged_stakes <- sum((r$"off_risk" == "Y")*r$stakes)
total_stakes <- sum(r$stakes)
c(hedged_stakes, total_stakes)
}
stakes <- lapply(split(x, x$game), function(d) {
do.call(rbind, lapply(split(d, d$date), get_stakes))
})
stakes
x$order <- 1:nrow(x)
head(x)
get_stakes <- function(r) {
hedged_stakes <- sum((r$"off_risk" == "Y")*r$stakes)
total_stakes <- sum(r$stakes)
c(hedged_stakes, total_stakes, r$order[1])
}
x$order <- 1:nrow(x)
stakes <- lapply(split(x, x$game), function(d) {
do.call(rbind, lapply(split(d, d$date), get_stakes))
})
stakes
x <- read.table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
colnames(x) <- c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds")
x$order <- 1:nrow(x)
head(x)
stakes <- lapply(split(x, x$game), function(d) {
do.call(rbind, lapply(split(d, d$date), get_stakes))
})
stakes
head(x)
tail(x)
y <- split(x, x$game)
head(y[[1]])
lapply(split(y[[1]], y[[1]]$date))
lapply(split(y[[1]], y[[1]]$date), get_stakes)
debug(get_stakes)
lapply(split(y[[1]], y[[1]]$date), get_stakes)
r
x <- read.table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
apply(x, 2, mode)
head(x)
is.data.frame(x)
x$V7
mode(x$V7)
apply(x, 2, class)
class(x$V2)
x$V2
?read.table
readxl::read_excel
readxl::read_excel_
tibble::as_tibble(x)
tibble::as_tibble(x)$V2
install.packages("readr")
x <- readr::read.table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
x <- readr::read_table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
head(x)
warnings()
head(x)
x <- readr::read_table("~/Work/Projects/EJS_Lotter/ms/actual.txt")
?readr::read_table
x <- readr::read_table(file = "~/Work/Projects/EJS_Lotter/ms/actual.txt",
col_names = c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds"))
warnings()
head(x)
x <- readr::read_table2(file = "~/Work/Projects/EJS_Lotter/ms/actual.txt",
col_names = c("game", "date", "off-risk", "f", "shared", "pwinners", "jackpot", "swinners", "bets", "odds"))
head(x)
rm(x)
lol
library(shiny)
library(shinythemes)
library(DT)
library(shinycssloaders)
source("~/GitHub/R/user_interface/modules/layers_config.R")
source("~/GitHub/R/user_interface/modules/controls_module.R")
source("~/GitHub/R/user_interface/modules/results_module.R")
ui <- fluidPage(h1("Monitoring Sheet Analysis"),
fluidRow(
column(width = 2,
wellPanel(controls_module_ui)
),
column(width = 4,
wellPanel(layer_module_ui)
),
column(width = 6,
results_module_ui %>% withSpinner()
))
)
server <- function(input, output, session) {
layers <- layer_module()
command <- controls_module(layers$data)
results <- results_module(command$data, layers$data)
layers$server(input, output, session)
command$server(input, output, session)
results$server(input, output, session)
}
sort_gel <- function(file_name) {
x <- read.table("con_gel.txt")[,-3]
total_el <- sum(x[,2])
x$pct <- x[,2]/total_el
x <- x[order(x[,2], decreasing = T),]
colnames(x) <- c("Game", "Ground up EL", "% of Total")
x
}
read_metrics <- function(file_name) {
files <- system2("ls", stdout = TRUE)
files <- files[grep(file_name, files)]
x <- lapply(files, read.table)
y <- x[[1]]
y[,-c(1:3)] <- 0
for(i in 1:length(x)) y[,-c(1:3)] <- y[,-c(1:3)] + x[[i]][,-c(1:3)]
y[,-c(1:3)] <- y[,-c(1:3)]/length(x)
y[,1] <- as.Date(y[,1], "%Y-%b-%d")
n_layers <- (ncol(y) - 2)/3
out <- list()
for(i in 1:n_layers) {
result <- cbind(y[,1:2], y[,(3*i):(3*i+2)])
colnames(result) <- c("Date", "Game", "AP", "EL", "EP")
result$"dEL" <- c(result$EL[1], diff(result$EL))
out[[i]] <- result[nrow(result):1, ]
}
out
}
shinyApp(ui, server)
library(shiny)
library(shinythemes)
library(DT)
library(shinycssloaders)
source("~/GitHub/R/user_interface/modules/layers_config.R")
source("~/GitHub/R/user_interface/modules/controls_module.R")
source("~/GitHub/R/user_interface/modules/results_module.R")
ui <- fluidPage(h1("Monitoring Sheet Analysis"),
fluidRow(
column(width = 2,
wellPanel(controls_module_ui)
),
column(width = 4,
wellPanel(layer_module_ui)
),
column(width = 6,
results_module_ui %>% withSpinner()
))
)
server <- function(input, output, session) {
layers <- layer_module()
command <- controls_module(layers$data)
results <- results_module(command$data, layers$data)
layers$server(input, output, session)
command$server(input, output, session)
results$server(input, output, session)
}
sort_gel <- function(file_name) {
x <- read.table("con_gel.txt")[,-3]
total_el <- sum(x[,2])
x$pct <- x[,2]/total_el
x <- x[order(x[,2], decreasing = T),]
colnames(x) <- c("Game", "Ground up EL", "% of Total")
x
}
read_metrics <- function(file_name) {
files <- system2("ls", stdout = TRUE)
files <- files[grep(file_name, files)]
x <- lapply(files, read.table)
y <- x[[1]]
y[,-c(1:3)] <- 0
for(i in 1:length(x)) y[,-c(1:3)] <- y[,-c(1:3)] + x[[i]][,-c(1:3)]
y[,-c(1:3)] <- y[,-c(1:3)]/length(x)
y[,1] <- as.Date(y[,1], "%Y-%b-%d")
n_layers <- (ncol(y) - 2)/3
out <- list()
for(i in 1:n_layers) {
result <- cbind(y[,1:2], y[,(3*i):(3*i+2)])
colnames(result) <- c("Date", "Game", "AP", "EL", "EP")
result$"dEL" <- c(result$EL[1], diff(result$EL))
out[[i]] <- result[nrow(result):1, ]
}
out
}
shinyApp(ui, server)
