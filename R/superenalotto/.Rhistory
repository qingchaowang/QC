format_date <- function(date_vector) {
as.Date(date_vector, "%Y-%b-%d")
}
read_losses <- function(x) {
losses <- read.table(x)
losses[,2] <- format_date(losses[,2])
losses
}
layer_losses <- function(x, capacity, att_point) {
pmin(capacity, pmax(x - att_point, 0))
}
split_losses_unit <- function(x, mc_size, to_usd_factor, start_date, end_date) {
x[,3] <- x[,3]*to_usd_factor
iteration <- x[,1]
inc_flag <- (x[,2] >= start_date) & (x[,2] < end_date)
x[,3] <- inc_flag * x[,3]
out <- tapply(x[,3], iteration, sum)
out <- cbind(unique(iteration), out)
missing_iteration <- setdiff(0:(mc_size - 1), unique(iteration))
missing_losses <- cbind(missing_iteration, 0)
out <- rbind(out, missing_losses)
out[order(out[,1]), ]
}
split_losses <- function(x, mc_size, to_usd_factor, ...) {
out <- NULL
date_vector <- c(...)
n_dates <- length(date_vector)
for(i in 1:(n_dates - 1)) {
losses_unit <- split_losses_unit(x, mc_size, to_usd_factor, date_vector[i], date_vector[i+1])[,2]
out <- cbind(out, losses_unit)
}
dimnames(out) <- NULL
out
}
tyche_ROL <- function(x, tower, beta) {
ROL <- rep(NA, 3)
for(i in 1:3) {
layer <- tower[[i]]
layer_losses <- pmin(layer$capacity, pmax(x - layer$att_point, 0))/layer$capacity
ROL[i] <- iROL[i] + beta*(mean(layer_losses) - iEL[i])
}
ROL
}
tyche_layer_cost <- function(capacity, att_point, beta, iROL, iEL, ipt = 0.12) {
function(ground_up_losses) {
my_losses <- layer_losses(ground_up_losses, capacity, att_point)
avg_losses <- mean(my_losses)/capacity
capacity*(iROL + beta*(avg_losses - iEL))*(1 + ipt)
}
}
ins_layer_cost <- function(capacity, att_point, beta, md, ipt = 0.12) {
function(ground_up_losses) {
my_losses <- layer_losses(ground_up_losses, capacity, att_point)
avg_losses <- mean(my_losses)/capacity
(1 + ipt)*max(md, avg_losses)*capacity
}
}
run <- function(folder, N, eur_to_usd, tower_cost, ...) {
cwd <- getwd()
setwd(folder)
stakes <- scan("gls_bet_count.txt")
stakes <- stakes + scan("ems_bet_count.txt")*2.5
stakes <- stakes + scan("ejs_bet_count.txt")*2
stakes <- stakes + scan("pbs_bet_count.txt")*3.5
stakes <- stakes + scan("mms_bet_count.txt")*3.5
lower_payouts <- scan("gls_lower.txt")
lower_payouts <- lower_payouts + scan("ems_lower.txt")
lower_payouts <- lower_payouts + scan("ejs_lower.txt")
lower_payouts <- lower_payouts + scan("pbs_lower.txt")/eur_to_usd
lower_payouts <- lower_payouts + scan("mms_lower.txt")/eur_to_usd
ems_hedged <- read.table("ems_hedged.txt")
pbs_hedged <- read.table("pbs_hedged.txt")
mms_hedged <- read.table("mms_hedged.txt")
ticket_cost <- ems_hedged[,1]*2.5
ticket_cost <- ticket_cost + pbs_hedged[,1]*2.3/eur_to_usd
ticket_cost <- ticket_cost + mms_hedged[,1]*2.3/eur_to_usd
ticket_income <- ems_hedged[,2]
ticket_income <- ticket_income + pbs_hedged[,2]/eur_to_usd
ticket_income <- ticket_income + mms_hedged[,2]/eur_to_usd
gu_losses <- ground_up_losses(folder, N, eur_to_usd, ...)
ins_cost <- sum(tower_cost(gu_losses))
setwd(cwd)
stakes - lower_payouts - ticket_cost + ticket_income - ins_cost
}
ground_up_losses <- function(folder, N, eur_to_usd, ...) {
cwd <- getwd()
setwd(folder)
eur_losses_data <- read_losses("eur_ils_losses.txt")
usd_losses_data <- read_losses("usd_ils_losses.txt")
eur_losses <- split_losses(eur_losses_data, N, eur_to_usd, ...)
usd_losses <- split_losses(usd_losses_data, N, 1, ...)
total_losses <- eur_losses + usd_losses
setwd(cwd)
total_losses
}
build_tower <- function(...) {
tower <- list(...)
function(gu_losses) {
sapply(tower, function(l) {
l(gu_losses)
})
}
}
r_layer <- tyche_layer_cost(30e6, 0, 1, 0, 0, 0)
c_layer <- tyche_layer_cost(30e6, 30e6, 1.35, 0.2425, 0.156)
b_layer <- tyche_layer_cost(30e6, 60e6, 1.35, 0.1475, 0.0891)
a_layer <- tyche_layer_cost(30e6, 90e6, 1.35, 0.09, 0.0474)
e1_layer <- tyche_layer_cost(50e6, 120e6, 1.35, 0.06284702, 0.02834675)
e2_layer <- tyche_layer_cost(75e6, 120e6, 1.35, 0.0605141, 0.02668713)
e3_layer <- tyche_layer_cost(100e6, 120e6, 1.35, 0.05491334, 0.02270281)
ins0_layer <- ins_layer_cost(33e6, 120e6, 1.6, 0.02)
ins1_layer <- ins_layer_cost(33e6, 170e6, 1.6, 0.02)
ins2_layer <- ins_layer_cost(33e6, 195e6, 1.6, 0.02)
ins3_layer <- ins_layer_cost(33e6, 220e6, 1.6, 0.02)
tower0 <- build_tower(r_layer, c_layer, b_layer, a_layer, ins0_layer)
tower1 <- build_tower(r_layer, c_layer, b_layer, a_layer, e1_layer, ins1_layer)
tower2 <- build_tower(r_layer, c_layer, b_layer, a_layer, e2_layer, ins2_layer)
tower3 <- build_tower(r_layer, c_layer, b_layer, a_layer, e3_layer, ins3_layer)
eur_to_usd <- 1.24
N <- 100000
gu_l0 <- ground_up_losses("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/output_1", N, eur_to_usd, "2018-1-1", "2020-1-1")
gu_l1 <- ground_up_losses("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/output_2", N, eur_to_usd, "2018-1-1", "2020-1-1")
gu_l2 <- ground_up_losses("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/output_3", N, eur_to_usd, "2018-1-1", "2020-1-1")
gu_l3 <- ground_up_losses("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/output_4", N, eur_to_usd, "2018-1-1", "2020-1-1")
out0 <- run("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/output_1", N, eur_to_usd, tower0, "2018-1-1", "2020-1-1")
out1 <- run("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/output_2", N, eur_to_usd, tower0, "2018-1-1", "2020-1-1")
out2 <- run("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/output_3", N, eur_to_usd, tower0, "2018-1-1", "2020-1-1")
out3 <- run("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/output_4", N, eur_to_usd, tower0, "2018-1-1", "2020-1-1")
mean(out1 - out0)
mean(out1 - out0)
mean(out2 - out0)
mean(out3 - out0)
x <- read.table("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/output_4/sep_jackpot.txt")
dim(x)
head(x)
head(x/1e6)
max()
max(x)
max(x/1e6)
tyche_cost <- function(x, beta, ipt, layer_f, name = "") {
f <- function(jackpot, odds) {
fy <- layer_f(x + jackpot)
fx <- layer_f(x)
(1+ipt)*beta*(mean(fy) - mean(fx))/odds
}
list(f = f, name = name)
}
trad_ins_cost <- function(mult, ipt, layer_f, name = "") {
f <- function(jackpot, odds) {
(1+ipt)*mult*layer_f(jackpot)/odds
}
list(f = f, name = name)
}
fixed_cost <- function(num, name = "") {
f <- function(jackpot, odds) {
num
}
list(f = f, name = name)
}
read_losses <- function(folder) {
x <- read.table(file.path(folder, "gls_t24_ag_losses.txt"))
x <- x + read.table(file.path(folder, "ejs_t24_ag_losses.txt"))
x <- x + read.table(file.path(folder, "ems_t24_ag_losses.txt"))
x <- x + read.table(file.path(folder, "ems_v24_ag_losses.txt"))
x
}
make_layer_f <- function(capacity, retention) {
function(x) {
pmin(capacity, pmax(x - retention, 0))
}
}
marginal_cost <- function(jackpots, odds, layer_list) {
result <- sapply(jackpots, function(jackpot) {
sapply(layer_list, function(l) {
l$f(jackpot, odds)
})
})
result <- t(result)
colnames(result) <- sapply(layer_list, function(l){l$name})
total_cost <- apply(result, 1, sum)
cbind(jackpot = jackpots, result, total_cost)
}
x <- read_losses("~/GitHub/R/sims/output_110")
x <- x*1.1818
r_layer <- tyche_cost(x[,1], 1, 0, make_layer_f(30e6, 0), "retention")
c_layer <- tyche_cost(x[,1], 1.35, 0.12, make_layer_f(30e6, 30e6), "c_layer")
b_layer <- tyche_cost(x[,1], 1.35, 0.12, make_layer_f(30e6, 60e6), "b_layer")
a_layer <- tyche_cost(x[,1], 1.35, 0.12, make_layer_f(30e6, 90e6), "a_layer")
e1_layer <- tyche_cost(x[,1], 1.35, 0.12, make_layer_f(50e6, 120e6), "e1_layer")
e2_layer <- tyche_cost(x[,1], 1.35, 0.12, make_layer_f(25e6, 170e6), "e2_layer")
e3_layer <- tyche_cost(x[,1], 1.35, 0.12, make_layer_f(25e6, 195e6), "e3_layer")
o_layer <- trad_ins_cost(1.6, 0.12, make_layer_f(33e6, 120e6), "s_layer")
o1_layer <- trad_ins_cost(1.6, 0.12, make_layer_f(33e6, 170e6), "s_layer")
o2_layer <- trad_ins_cost(1.6, 0.12, make_layer_f(33e6, 195e6), "s_layer")
o3_layer <- trad_ins_cost(1.6, 0.12, make_layer_f(33e6, 220e6), "s_layer")
ils_tower <- list(r_layer, c_layer, b_layer, a_layer, o_layer)
ils1_tower <- list(r_layer, c_layer, b_layer, a_layer, e1_layer, o1_layer)
ils2_tower <- list(r_layer, c_layer, b_layer, a_layer, e1_layer, e2_layer, o2_layer)
ils3_tower <- list(r_layer, c_layer, b_layer, a_layer, e1_layer, e2_layer, e3_layer, o3_layer)
marginal_cost(150e6, 622614630, ils3_tower)
marginal_cost(c(150e6, 200e6), 622614630, ils3_tower)
marginal_cost(c(150e6, 250e6), 622614630, ils3_tower)
marginal_cost(matrix(c(150e6, 250e6, 150e6, 250e6), 2, 2), 622614630, ils3_tower)
matrix(1:10, 5, 2)
c(matrix(1:10, 5, 2))
203/1.24
253/1.24
usd_x <- x*eur_to_usd
usd_x <- x*eur_to_usd
cap <- 200e6*eur_to_usd
y <- marginal_cost(pmin(c(usd_x), cap), 622614630, ils3_tower)
usd_x <- x*eur_to_usd
cap <- 200e6*eur_to_usd
dim(usd_x)
length(usd_x)
x <- as.matrix(read.table("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/output_4/sep_jackpot.txt"))
length(usd_x)
length(x)
usd_x <- x*eur_to_usd
cap <- 200e6*eur_to_usd
y <- marginal_cost(pmin(c(usd_x), cap), 622614630, ils3_tower)
format_date <- function(date_vector) {
as.Date(date_vector, "%Y-%b-%d")
}
read_losses <- function(x) {
losses <- read.table(x)
losses[,2] <- format_date(losses[,2])
losses
}
layer_losses <- function(x, capacity, att_point) {
pmin(capacity, pmax(x - att_point, 0))
}
split_losses_unit <- function(x, mc_size, to_usd_factor, start_date, end_date) {
x[,3] <- x[,3]*to_usd_factor
iteration <- x[,1]
inc_flag <- (x[,2] >= start_date) & (x[,2] < end_date)
x[,3] <- inc_flag * x[,3]
out <- tapply(x[,3], iteration, sum)
out <- cbind(unique(iteration), out)
missing_iteration <- setdiff(0:(mc_size - 1), unique(iteration))
missing_losses <- cbind(missing_iteration, 0)
out <- rbind(out, missing_losses)
out[order(out[,1]), ]
}
split_losses <- function(x, mc_size, to_usd_factor, ...) {
out <- NULL
date_vector <- c(...)
n_dates <- length(date_vector)
for(i in 1:(n_dates - 1)) {
losses_unit <- split_losses_unit(x, mc_size, to_usd_factor, date_vector[i], date_vector[i+1])[,2]
out <- cbind(out, losses_unit)
}
dimnames(out) <- NULL
out
}
tyche_ROL <- function(x, tower, beta) {
ROL <- rep(NA, 3)
for(i in 1:3) {
layer <- tower[[i]]
layer_losses <- pmin(layer$capacity, pmax(x - layer$att_point, 0))/layer$capacity
ROL[i] <- iROL[i] + beta*(mean(layer_losses) - iEL[i])
}
ROL
}
tyche_layer_cost <- function(layer, beta, iROL, iEL, ipt = 0.12) {
function(ground_up_losses) {
my_losses <- layer_losses(ground_up_losses, layer$capacity, layer$att_point)
avg_losses <- mean(my_losses)/layer$capacity
layer$capacity*(iROL + beta*(avg_losses - iEL))*(1 + ipt)
}
}
ins_layer_cost <- function(layer, beta, md, ipt = 0.12) {
function(ground_up_losses) {
my_losses <- layer_losses(ground_up_losses, layer$capacity, layer$att_point)
avg_losses <- mean(my_losses)/layer$capacity
(1 + ipt)*max(md, avg_losses)*layer$capacity
}
}
avg_xs_draws <- function(lb, ub, x) {
mean(apply(x, 2, function(y){
sum( (y >= lb) & (y < ub) )
}))
}
run <- function(folder, N, eur_to_usd, tower_cost, capacity, ...) {
cwd <- getwd()
setwd(folder)
stakes <- scan("gls_bet_count.txt")
stakes <- stakes + scan("ems_bet_count.txt")*2.5
stakes <- stakes + scan("ejs_bet_count.txt")*2
stakes <- stakes + scan("pbs_bet_count.txt")*3.5
stakes <- stakes + scan("mms_bet_count.txt")*3.5
lower_payouts <- scan("gls_lower.txt")
lower_payouts <- lower_payouts + scan("ems_lower.txt")
lower_payouts <- lower_payouts + scan("ejs_lower.txt")
lower_payouts <- lower_payouts + scan("pbs_lower.txt")/eur_to_usd
lower_payouts <- lower_payouts + scan("mms_lower.txt")/eur_to_usd
ems_hedged <- read.table("ems_hedged.txt")
pbs_hedged <- read.table("pbs_hedged.txt")
mms_hedged <- read.table("mms_hedged.txt")
ticket_cost <- ems_hedged[,1]*2.5
ticket_cost <- ticket_cost + pbs_hedged[,1]*2.3/eur_to_usd
ticket_cost <- ticket_cost + mms_hedged[,1]*2.3/eur_to_usd
ticket_income <- ems_hedged[,2]
ticket_income <- ticket_income + pbs_hedged[,2]/eur_to_usd
ticket_income <- ticket_income + mms_hedged[,2]/eur_to_usd
pb_jackpot <- t(read.table("pbp_jackpot.txt"))
mm_jackpot <- t(read.table("mmp_jackpot.txt"))
pb_xs_draws <- avg_xs_draws(153e6, capacity, pb_jackpot*0.372)
mm_xs_draws <- avg_xs_draws(153e6, capacity, mm_jackpot*0.372)
gu_losses <- ground_up_losses(folder, N, eur_to_usd, ...)
ins_cost <- tower_cost(gu_losses)/eur_to_usd
setwd(cwd)
list(pb_xs_draws, mm_xs_draws, net_hedging = mean(ticket_cost - ticket_income), smp = mean(stakes - lower_payouts),
ils_cost = ins_cost, total = mean(stakes - lower_payouts - ticket_cost + ticket_income - sum(ins_cost)))
}
ground_up_losses <- function(folder, N, eur_to_usd, ...) {
cwd <- getwd()
setwd(folder)
eur_losses_data <- read_losses("eur_ils_losses.txt")
usd_losses_data <- read_losses("usd_ils_losses.txt")
eur_losses <- split_losses(eur_losses_data, N, eur_to_usd, ...)
usd_losses <- split_losses(usd_losses_data, N, 1, ...)
total_losses <- eur_losses + usd_losses
setwd(cwd)
total_losses
}
build_tower <- function(...) {
tower <- list(...)
function(gu_losses) {
sapply(tower, function(l) {
l(gu_losses)
})
}
}
calc_init_ROL <- function(x, layer) {
el <- mean(layer_losses(x, layer$capacity, layer$att_point))/layer$capacity
rol <- 0.0229 + 1.4057*el
c(el = el, rol = rol)
}
x <- read_losses("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/test/usd_ils_losses.txt")
x <- split_losses(x, 1000000, 1, "2018-1-1", "2019-1-1")
dim(x)
mean()
mean()x
mean(x)
read_losses <- function(x) {
losses <- read.table(x)
losses[,2] <- format_date(losses[,2])
losses
}
x <- read_losses("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/test/usd_ils_losses.txt")
format_date <- function(date_vector) {
as.Date(date_vector, "%Y-%b-%d")
}
x <- read_losses("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/test/usd_ils_losses.txt")
split_losses_unit <- function(x, mc_size, to_usd_factor, start_date, end_date) {
x[,3] <- x[,3]*to_usd_factor
iteration <- x[,1]
inc_flag <- (x[,2] >= start_date) & (x[,2] < end_date)
x[,3] <- inc_flag * x[,3]
out <- tapply(x[,3], iteration, sum)
out <- cbind(unique(iteration), out)
missing_iteration <- setdiff(0:(mc_size - 1), unique(iteration))
missing_losses <- cbind(missing_iteration, 0)
out <- rbind(out, missing_losses)
out[order(out[,1]), ]
}
split_losses <- function(x, mc_size, to_usd_factor, ...) {
out <- NULL
date_vector <- c(...)
n_dates <- length(date_vector)
for(i in 1:(n_dates - 1)) {
losses_unit <- split_losses_unit(x, mc_size, to_usd_factor, date_vector[i], date_vector[i+1])[,2]
out <- cbind(out, losses_unit)
}
dimnames(out) <- NULL
out
}
x <- split_losses(x, 1000000, 1, "2018-1-1", "2019-1-1")
mean(x)
mean(x)/1.24
x <- read.table("~/GitHub/modelling_report/sims/ag_losses/output_95/gls_t24_ag_losses.txt") +
read.table("~/GitHub/modelling_report/sims/ag_losses/output_95/ems_t24_ag_losses.txt") +
read.table("~/GitHub/modelling_report/sims/ag_losses/output_95/ems_v24_ag_losses.txt") +
read.table("~/GitHub/modelling_report/sims/ag_losses/output_95/ejs_t24_ag_losses.txt") +
1
x <- read.table("~/GitHub/modelling_report/sims/ag_losses/output_95/gls_t24_ag_losses.txt") +
read.table("~/GitHub/modelling_report/sims/ag_losses/output_95/ems_t24_ag_losses.txt") +
read.table("~/GitHub/modelling_report/sims/ag_losses/output_95/ems_v24_ag_losses.txt") +
read.table("~/GitHub/modelling_report/sims/ag_losses/output_95/ejs_t24_ag_losses.txt")
dim(x)
mean(x[,1]*1,1818)
mean(x[,1]*1.1818)
y <- read_losses("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/test/usd_ils_losses.txt")
y <- split_losses(y, 1000000, 1, "2018-1-1", "2019-1-1")
qqplot(x[,1] y)
qqplot(x[,1], y)
abline(a = 0, b = 1, col = 2)
mean(y)
x <- x[,1]*1.1818
qqplot(x[,1], y)
qqplot(x, y)
abline(a = 0, b = 1, col = 2)
x <- scan("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Debug/must_go.txt")
hist()
hist(x)
mean(x)
table(x)
table(x)/length(x)
x <- read.table("~/GitHub/modelling_report/sims/ag_losses/output_95/gls_t24_ag_losses.txt") +
read.table("~/GitHub/modelling_report/sims/ag_losses/output_95/ems_t24_ag_losses.txt") +
read.table("~/GitHub/modelling_report/sims/ag_losses/output_95/ems_v24_ag_losses.txt") +
read.table("~/GitHub/modelling_report/sims/ag_losses/output_95/ejs_t24_ag_losses.txt")
x <- x[,1]*1.1818
y1 <- y
y2 <- read_losses("~/GitHub/build-Tyche-tests-Desktop_Qt_5_10_0_clang_64bit-Release/test/usd_ils_losses.txt")
y2 <- split_losses(y2, 1000000, 1, "2018-1-1", "2019-1-1")
mean(y1)
mean(y2)
mean(x)
qqplot(x, y1)
abline(a = 0, b = 1, col = 2)
qqplot(x, y2); abline(a = 0, b = 1, col = 2)
qqplot(y1, y2); abline(a = 0, b = 1, col = 2)
