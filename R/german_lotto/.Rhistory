prize <- round_down(10)(ifelse(winners > 0, jpad/winners, 0))
prize <- pool_seniority(jpad, winners, prize, 1, 8, round_down(10))
to_roll_over <- ifelse(winners[-9], 0, jpad[-9])
list(date = date, entries = entries, winners = winners, jpad = jpad, prize = prize, fund = fund, counter = counter, to_roll_over = to_roll_over)
}
make_draw <- function(serialised_draw) {
out <- list()
out$entries <- serialised_draw$entries
out$winners <- sapply(paste("winners_", 1:9, sep = ""), getElement, object = serialised_draw)
out$jpad <- sapply(paste("jpad_", 1:9, sep = ""), getElement, object = serialised_draw)
out$fund <- sapply(paste("fund_", 1:9, sep = ""), getElement, object = serialised_draw)
out$counter <- sapply(paste("counter_", 1:8, sep = ""), getElement, object = serialised_draw)
out$to_roll_over <- sapply(paste("to_roll_over_", 1:8, sep = ""), getElement, object = serialised_draw)
lapply(out, function(x){names(x) <- NULL; x})
}
serialize_draw <- function(draw) {
flat_draw <- do.call(c, lapply(draw, as.character))
names(flat_draw) <- do.call(c, mapply(function(x,y){
if(y == 1) x
else paste(x, 1:y, sep = "_")
}, as.list(names(draw)), lapply(draw, length)))
flat_draw
}
test <- function() {
my_data <- read.csv("~/GitHub/R/data_extractors/german_lotto/extracted_data.csv", header = T)
latest_draw <- make_draw(my_data[nrow(my_data),])
function(new_data) {
latest_draw <<- next_draw(latest_draw, new_data)
latest_draw
}
}
x <- crawler()
z <- x$process("2018-05-09", test())
z[[1]]
round_down <- function(cents) {
function(x) {
floor(x*cents)/cents
}
}
must_go <- function(jpad, winners, from, to) {
offset <- from - 1
k <- min(which(winners[from:to] > 0)) + offset
if(k > from) {
jpad[k] <- sum(jpad[from:k])
jpad[from:(k-1)] <- 0
}
jpad
}
pool_seniority <- function(jpad, winners, prize, from, to, round_f) {
tags <- from:to
for(i in 1:(length(tags)-1)) {
fund_i <- jpad[tags[i]]
winners_i <- winners[tags[i]]
if(winners_i) {
for(j in (i+1):length(tags)) {
fund_j <- jpad[tags[j]]
prize_j <- prize[tags[j]]
winners_j <- winners[tags[j]]
if(winners_j) {
fund_i <- fund_i + fund_j
winners_i <- winners_i + winners_j
if(prize[tags[i]] < prize_j) {
for(k in i:j) {
if(winners[tags[k]]) prize[tags[k]] <- round_f(fund_i/winners_i)
}
}
}
}
}
}
prize
}
next_draw <- function(x, new_data) {
date <- new_data$date
entries <- new_data$stakes
winners <- c(sapply(paste("winners_", 1:9, sep = ""), getElement, object = new_data), use.names = F)
pct_alloc_2to8 <- c(0.1, 0.05, 0.15, 0.05, 0.1, 0.1, 0.45)
prize_fund <- entries*0.5
counter <- x$counter
counter <- ifelse((x$counter == 13) | x$winners[-9], 1, x$counter + 1)
counter[2] <- ifelse(((x$winners[1] | x$counter[1] == 13) & !x$winners[2])|x$winners[2], 1, x$counter[2] + 1)
jpad <- rep(NA, 9)
jpad[1] <- 0.128*prize_fund
jpad[9] <- 5*x$winners[9]
prize_fund <- prize_fund - jpad[1] - jpad[9]
jpad[2:8] <- prize_fund*pct_alloc_2to8
jpad[1:8] <- jpad[1:8] + x$to_roll_over
fund <- jpad
for(i in 1:8) {
if(counter[i] == 13) jpad <- must_go(jpad, winners, i, 9)
}
if(winners[1] & !winners[2]) {
jpad[1] <- sum(jpad[1:2])
jpad[2] <- 0
}
prize <- round_down(10)(ifelse(winners > 0, jpad/winners, 0))
prize <- pool_seniority(jpad, winners, prize, 1, 8, round_down(10))
to_roll_over <- ifelse(winners[-9], 0, jpad[-9])
list(date = date, entries = entries, winners = winners, jpad = jpad, prize = prize, fund = fund, counter = counter, to_roll_over = to_roll_over)
}
make_draw <- function(serialised_draw) {
out <- list()
out$entries <- serialised_draw$entries
out$winners <- sapply(paste("winners_", 1:9, sep = ""), getElement, object = serialised_draw)
out$jpad <- sapply(paste("jpad_", 1:9, sep = ""), getElement, object = serialised_draw)
out$fund <- sapply(paste("fund_", 1:9, sep = ""), getElement, object = serialised_draw)
out$counter <- sapply(paste("counter_", 1:8, sep = ""), getElement, object = serialised_draw)
out$to_roll_over <- sapply(paste("to_roll_over_", 1:8, sep = ""), getElement, object = serialised_draw)
lapply(out, function(x){names(x) <- NULL; x})
}
serialize_draw <- function(draw) {
flat_draw <- do.call(c, lapply(draw, as.character))
names(flat_draw) <- do.call(c, mapply(function(x,y){
if(y == 1) x
else paste(x, 1:y, sep = "_")
}, as.list(names(draw)), lapply(draw, length)))
flat_draw
}
test <- function() {
my_data <- read.csv("~/GitHub/R/data_extractors/german_lotto/extracted_data.csv", header = T)
latest_draw <- make_draw(my_data[nrow(my_data),])
function(new_data) {
latest_draw <<- next_draw(latest_draw, new_data)
serialize_draw(latest_draw)
}
}
x <- crawler()
z <- x$process("2018-05-09", test())
z[[1]]
round_down <- function(cents) {
function(x) {
floor(x*cents)/cents
}
}
must_go <- function(jpad, winners, from, to) {
offset <- from - 1
k <- min(which(winners[from:to] > 0)) + offset
if(k > from) {
jpad[k] <- sum(jpad[from:k])
jpad[from:(k-1)] <- 0
}
jpad
}
pool_seniority <- function(jpad, winners, prize, from, to, round_f) {
tags <- from:to
for(i in 1:(length(tags)-1)) {
fund_i <- jpad[tags[i]]
winners_i <- winners[tags[i]]
if(winners_i) {
for(j in (i+1):length(tags)) {
fund_j <- jpad[tags[j]]
prize_j <- prize[tags[j]]
winners_j <- winners[tags[j]]
if(winners_j) {
fund_i <- fund_i + fund_j
winners_i <- winners_i + winners_j
if(prize[tags[i]] < prize_j) {
for(k in i:j) {
if(winners[tags[k]]) prize[tags[k]] <- round_f(fund_i/winners_i)
}
}
}
}
}
}
prize
}
next_draw <- function(x, new_data) {
date <- as.Date(new_data$date, "%Y-%b-%d")
entries <- new_data$stakes
winners <- c(sapply(paste("winners_", 1:9, sep = ""), getElement, object = new_data), use.names = F)
pct_alloc_2to8 <- c(0.1, 0.05, 0.15, 0.05, 0.1, 0.1, 0.45)
prize_fund <- entries*0.5
counter <- x$counter
counter <- ifelse((x$counter == 13) | x$winners[-9], 1, x$counter + 1)
counter[2] <- ifelse(((x$winners[1] | x$counter[1] == 13) & !x$winners[2])|x$winners[2], 1, x$counter[2] + 1)
jpad <- rep(NA, 9)
jpad[1] <- 0.128*prize_fund
jpad[9] <- 5*x$winners[9]
prize_fund <- prize_fund - jpad[1] - jpad[9]
jpad[2:8] <- prize_fund*pct_alloc_2to8
jpad[1:8] <- jpad[1:8] + x$to_roll_over
fund <- jpad
for(i in 1:8) {
if(counter[i] == 13) jpad <- must_go(jpad, winners, i, 9)
}
if(winners[1] & !winners[2]) {
jpad[1] <- sum(jpad[1:2])
jpad[2] <- 0
}
prize <- round_down(10)(ifelse(winners > 0, jpad/winners, 0))
prize <- pool_seniority(jpad, winners, prize, 1, 8, round_down(10))
to_roll_over <- ifelse(winners[-9], 0, jpad[-9])
list(date = date, entries = entries, winners = winners, jpad = jpad, prize = prize, fund = fund, counter = counter, to_roll_over = to_roll_over)
}
make_draw <- function(serialised_draw) {
out <- list()
out$entries <- serialised_draw$entries
out$winners <- sapply(paste("winners_", 1:9, sep = ""), getElement, object = serialised_draw)
out$jpad <- sapply(paste("jpad_", 1:9, sep = ""), getElement, object = serialised_draw)
out$fund <- sapply(paste("fund_", 1:9, sep = ""), getElement, object = serialised_draw)
out$counter <- sapply(paste("counter_", 1:8, sep = ""), getElement, object = serialised_draw)
out$to_roll_over <- sapply(paste("to_roll_over_", 1:8, sep = ""), getElement, object = serialised_draw)
lapply(out, function(x){names(x) <- NULL; x})
}
serialize_draw <- function(draw) {
flat_draw <- do.call(c, lapply(draw, as.character))
names(flat_draw) <- do.call(c, mapply(function(x,y){
if(y == 1) x
else paste(x, 1:y, sep = "_")
}, as.list(names(draw)), lapply(draw, length)))
flat_draw
}
test <- function() {
my_data <- read.csv("~/GitHub/R/data_extractors/german_lotto/extracted_data.csv", header = T)
latest_draw <- make_draw(my_data[nrow(my_data),])
function(new_data) {
latest_draw <<- next_draw(latest_draw, new_data)
serialize_draw(latest_draw)
}
}
x <- crawler()
z <- x$process("2018-05-09", test())
z
z[[1]]
as.Date("2018-2-1")
format(as.Date("2018-2-1"))
format(as.Date("2018-2-1"), "%Y-%b-%d")
format(as.Date("2018-2-1"), "%Y-%m-%d")
round_down <- function(cents) {
function(x) {
floor(x*cents)/cents
}
}
must_go <- function(jpad, winners, from, to) {
offset <- from - 1
k <- min(which(winners[from:to] > 0)) + offset
if(k > from) {
jpad[k] <- sum(jpad[from:k])
jpad[from:(k-1)] <- 0
}
jpad
}
pool_seniority <- function(jpad, winners, prize, from, to, round_f) {
tags <- from:to
for(i in 1:(length(tags)-1)) {
fund_i <- jpad[tags[i]]
winners_i <- winners[tags[i]]
if(winners_i) {
for(j in (i+1):length(tags)) {
fund_j <- jpad[tags[j]]
prize_j <- prize[tags[j]]
winners_j <- winners[tags[j]]
if(winners_j) {
fund_i <- fund_i + fund_j
winners_i <- winners_i + winners_j
if(prize[tags[i]] < prize_j) {
for(k in i:j) {
if(winners[tags[k]]) prize[tags[k]] <- round_f(fund_i/winners_i)
}
}
}
}
}
}
prize
}
next_draw <- function(x, new_data) {
date <- format(new_data$date, "%Y-%b-%d")
entries <- new_data$stakes
winners <- c(sapply(paste("winners_", 1:9, sep = ""), getElement, object = new_data), use.names = F)
pct_alloc_2to8 <- c(0.1, 0.05, 0.15, 0.05, 0.1, 0.1, 0.45)
prize_fund <- entries*0.5
counter <- x$counter
counter <- ifelse((x$counter == 13) | x$winners[-9], 1, x$counter + 1)
counter[2] <- ifelse(((x$winners[1] | x$counter[1] == 13) & !x$winners[2])|x$winners[2], 1, x$counter[2] + 1)
jpad <- rep(NA, 9)
jpad[1] <- 0.128*prize_fund
jpad[9] <- 5*x$winners[9]
prize_fund <- prize_fund - jpad[1] - jpad[9]
jpad[2:8] <- prize_fund*pct_alloc_2to8
jpad[1:8] <- jpad[1:8] + x$to_roll_over
fund <- jpad
for(i in 1:8) {
if(counter[i] == 13) jpad <- must_go(jpad, winners, i, 9)
}
if(winners[1] & !winners[2]) {
jpad[1] <- sum(jpad[1:2])
jpad[2] <- 0
}
prize <- round_down(10)(ifelse(winners > 0, jpad/winners, 0))
prize <- pool_seniority(jpad, winners, prize, 1, 8, round_down(10))
to_roll_over <- ifelse(winners[-9], 0, jpad[-9])
list(date = date, entries = entries, winners = winners, jpad = jpad, prize = prize, fund = fund, counter = counter, to_roll_over = to_roll_over)
}
make_draw <- function(serialised_draw) {
out <- list()
out$entries <- serialised_draw$entries
out$winners <- sapply(paste("winners_", 1:9, sep = ""), getElement, object = serialised_draw)
out$jpad <- sapply(paste("jpad_", 1:9, sep = ""), getElement, object = serialised_draw)
out$fund <- sapply(paste("fund_", 1:9, sep = ""), getElement, object = serialised_draw)
out$counter <- sapply(paste("counter_", 1:8, sep = ""), getElement, object = serialised_draw)
out$to_roll_over <- sapply(paste("to_roll_over_", 1:8, sep = ""), getElement, object = serialised_draw)
lapply(out, function(x){names(x) <- NULL; x})
}
serialize_draw <- function(draw) {
flat_draw <- do.call(c, lapply(draw, as.character))
names(flat_draw) <- do.call(c, mapply(function(x,y){
if(y == 1) x
else paste(x, 1:y, sep = "_")
}, as.list(names(draw)), lapply(draw, length)))
flat_draw
}
test <- function() {
my_data <- read.csv("~/GitHub/R/data_extractors/german_lotto/extracted_data.csv", header = T)
latest_draw <- make_draw(my_data[nrow(my_data),])
function(new_data) {
latest_draw <<- next_draw(latest_draw, new_data)
serialize_draw(latest_draw)
}
}
x <- crawler()
z <- x$process("2018-05-09", test())
z
z[[1]]
do.call(data.frame, z)
do.call(rbind, z)
write.csv(z, file = "del.csv", quote = F, row.names = F)
z
colnames(z)
names(z)
dim(z)
class(z)
z
z <- do.call(rbind, z)
write.csv(z, file = "del.csv", quote = F, row.names = F)
unzip()
unzip
?unzip
source("~/GitHub/R/rules/rules.R")
make_draw <- function(serialised_draw) {
out <- list()
out$date <- as.Date(serialised_draw$date, "%Y-%b-%d")
out$entries <- serialised_draw$entries
out$winners <- sapply(paste("winners_", 1:9, sep = ""), getElement, object = serialised_draw)
out$jpad <- sapply(paste("jpad_", 1:9, sep = ""), getElement, object = serialised_draw)
out$fund <- sapply(paste("fund_", 1:9, sep = ""), getElement, object = serialised_draw)
out$counter <- sapply(paste("counter_", 1:8, sep = ""), getElement, object = serialised_draw)
out$to_roll_over <- sapply(paste("to_roll_over_", 1:8, sep = ""), getElement, object = serialised_draw)
out$prize <- sapply(paste("prize_", 1:9, sep = ""), getElement, object = serialised_draw)
lapply(out, function(x){names(x) <- NULL; x})
}
x <- read.csv("~/GitHub/R/data_extractors/german_lotto/extracted_data.csv")
x[1,]
names(x)
names(x)
z <- names(x)
grep("date", x)
?grep
grep("date", z)
grep("winners", z)
z
serialized_draw <- x[1,]
serialized_draw
names(serialized_draw)
draw_names <- names(serialised_draw)
serialised_draw <- x[1,]
draw_names <- names(serialised_draw)
out <- list()
draw_names
draw_names[1]
grep("date", draw_names)
z
z <- 1:10
z <- z[-c(1:10)]
z
length(z)
make_draw <- function(serialised_draw) {
draw_names <- names(serialised_draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
indices <- grep(name, draw_names)
if(length(indices) == 1) out[[name]] <- serialised_draw[[name]]
draw_names <- draw_names[-indices]
}
out
# out$date <- as.Date(serialised_draw$date, "%Y-%b-%d")
# out$entries <- serialised_draw$entries
# out$winners <- sapply(paste("winners_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$jpad <- sapply(paste("jpad_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$fund <- sapply(paste("fund_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$counter <- sapply(paste("counter_", 1:8, sep = ""), getElement, object = serialised_draw)
# out$to_roll_over <- sapply(paste("to_roll_over_", 1:8, sep = ""), getElement, object = serialised_draw)
# out$prize <- sapply(paste("prize_", 1:9, sep = ""), getElement, object = serialised_draw)
# lapply(out, function(x){names(x) <- NULL; x})
}
make_draw(x[1,])
debug(make_draw)
make_draw(x[1,])
name
indices
length(indices)
out
out
draw_names
name
indices
out
name
grep("_\\d+", "winners_1")
grep("_\\d+", "winners_13")
grep("_\\d", "winners_13")
grep("_\\d+", "winners_13")
grep("_\\d+", "winners_")
sub("_\\d+", "", "winners_1")
sub("_\\d+", "", "winners_143")
sub("_\\d+", "", "date")
sub("_\\d", "", "winners_143")
sub("_\\d+", "", "winners_143")
make_draw <- function(serialised_draw) {
draw_names <- names(serialised_draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
name <- sub("_\\d+", "", name)
indices <- grep(name, draw_names)
if(length(indices) == 1) out[[name]] <- serialised_draw[[name]]
draw_names <- draw_names[-indices]
}
out
# out$date <- as.Date(serialised_draw$date, "%Y-%b-%d")
# out$entries <- serialised_draw$entries
# out$winners <- sapply(paste("winners_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$jpad <- sapply(paste("jpad_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$fund <- sapply(paste("fund_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$counter <- sapply(paste("counter_", 1:8, sep = ""), getElement, object = serialised_draw)
# out$to_roll_over <- sapply(paste("to_roll_over_", 1:8, sep = ""), getElement, object = serialised_draw)
# out$prize <- sapply(paste("prize_", 1:9, sep = ""), getElement, object = serialised_draw)
# lapply(out, function(x){names(x) <- NULL; x})
}
make_draw(x[1,])
make_draw <- function(serialised_draw) {
draw_names <- names(serialised_draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
name <- sub("_\\d+", "", name)
indices <- grep(name, draw_names)
if(length(indices) == 1) out[[name]] <- serialised_draw[[name]]
else out[[name]] <- sapply(draw_names[indices], getElement, object = serialised_draw)
draw_names <- draw_names[-indices]
}
out
# out$date <- as.Date(serialised_draw$date, "%Y-%b-%d")
# out$entries <- serialised_draw$entries
# out$winners <- sapply(paste("winners_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$jpad <- sapply(paste("jpad_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$fund <- sapply(paste("fund_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$counter <- sapply(paste("counter_", 1:8, sep = ""), getElement, object = serialised_draw)
# out$to_roll_over <- sapply(paste("to_roll_over_", 1:8, sep = ""), getElement, object = serialised_draw)
# out$prize <- sapply(paste("prize_", 1:9, sep = ""), getElement, object = serialised_draw)
# lapply(out, function(x){names(x) <- NULL; x})
}
make_draw(x[1,])
make_draw <- function(serialised_draw) {
draw_names <- names(serialised_draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
name <- sub("_\\d+", "", name)
indices <- grep(name, draw_names)
if(length(indices) == 1) out[[name]] <- serialised_draw[[name]]
else out[[name]] <- c(sapply(draw_names[indices], getElement, object = serialised_draw), use.names = F)
draw_names <- draw_names[-indices]
}
out
# out$date <- as.Date(serialised_draw$date, "%Y-%b-%d")
# out$entries <- serialised_draw$entries
# out$winners <- sapply(paste("winners_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$jpad <- sapply(paste("jpad_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$fund <- sapply(paste("fund_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$counter <- sapply(paste("counter_", 1:8, sep = ""), getElement, object = serialised_draw)
# out$to_roll_over <- sapply(paste("to_roll_over_", 1:8, sep = ""), getElement, object = serialised_draw)
# out$prize <- sapply(paste("prize_", 1:9, sep = ""), getElement, object = serialised_draw)
# lapply(out, function(x){names(x) <- NULL; x})
}
make_draw(x[1,])
make_draw <- function(serialised_draw) {
draw_names <- names(serialised_draw)
out <- list()
while(length(draw_names)) {
name <- draw_names[1]
name <- sub("_\\d+", "", name)
indices <- grep(name, draw_names)
if(length(indices) == 1) out[[name]] <- serialised_draw[[name]]
else out[[name]] <- c(sapply(draw_names[indices], getElement, object = serialised_draw), use.names = F)
draw_names <- draw_names[-indices]
}
out$date <- as.Date(out$date, "%Y-%b-%d")
out
# out$date <- as.Date(serialised_draw$date, "%Y-%b-%d")
# out$entries <- serialised_draw$entries
# out$winners <- sapply(paste("winners_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$jpad <- sapply(paste("jpad_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$fund <- sapply(paste("fund_", 1:9, sep = ""), getElement, object = serialised_draw)
# out$counter <- sapply(paste("counter_", 1:8, sep = ""), getElement, object = serialised_draw)
# out$to_roll_over <- sapply(paste("to_roll_over_", 1:8, sep = ""), getElement, object = serialised_draw)
# out$prize <- sapply(paste("prize_", 1:9, sep = ""), getElement, object = serialised_draw)
# lapply(out, function(x){names(x) <- NULL; x})
}
make_draw(x[1,])
